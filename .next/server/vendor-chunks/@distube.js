/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@distube";
exports.ids = ["vendor-chunks/@distube"];
exports.modules = {

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/agent.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const { ProxyAgent } = __webpack_require__(/*! undici */ \"(rsc)/./node_modules/undici/index.js\");\nconst { HttpsProxyAgent } = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/index.js\");\nconst { Cookie, CookieJar, canonicalDomain } = __webpack_require__(/*! tough-cookie */ \"(rsc)/./node_modules/tough-cookie/dist/cookie/index.js\");\nconst { CookieAgent, cookie } = __webpack_require__(/*! http-cookie-agent/undici */ \"(rsc)/./node_modules/http-cookie-agent/undici/index.js\");\n\nconst convertSameSite = sameSite => {\n  switch (sameSite) {\n    case \"strict\":\n      return \"strict\";\n    case \"lax\":\n      return \"lax\";\n    case \"no_restriction\":\n    case \"unspecified\":\n    default:\n      return \"none\";\n  }\n};\n\nconst convertCookie = cookie =>\n  cookie instanceof Cookie\n    ? cookie\n    : new Cookie({\n        key: cookie.name,\n        value: cookie.value,\n        expires: typeof cookie.expirationDate === \"number\" ? new Date(cookie.expirationDate * 1000) : \"Infinity\",\n        domain: canonicalDomain(cookie.domain),\n        path: cookie.path,\n        secure: cookie.secure,\n        httpOnly: cookie.httpOnly,\n        sameSite: convertSameSite(cookie.sameSite),\n        hostOnly: cookie.hostOnly,\n      });\n\nconst addCookies = (exports.addCookies = (jar, cookies) => {\n  if (!cookies || !Array.isArray(cookies)) {\n    throw new Error(\"cookies must be an array\");\n  }\n  if (!cookies.some(c => c.name === \"SOCS\")) {\n    cookies.push({\n      domain: \".youtube.com\",\n      hostOnly: false,\n      httpOnly: false,\n      name: \"SOCS\",\n      path: \"/\",\n      sameSite: \"lax\",\n      secure: true,\n      session: false,\n      value: \"CAI\",\n    });\n  }\n  for (const cookie of cookies) {\n    jar.setCookieSync(convertCookie(cookie), \"https://www.youtube.com\");\n  }\n});\n\nexports.addCookiesFromString = (jar, cookies) => {\n  if (!cookies || typeof cookies !== \"string\") {\n    throw new Error(\"cookies must be a string\");\n  }\n  return addCookies(\n    jar,\n    cookies\n      .split(\";\")\n      .map(c => Cookie.parse(c))\n      .filter(Boolean),\n  );\n};\n\nconst createAgent = (exports.createAgent = (cookies = [], opts = {}) => {\n  const options = Object.assign({}, opts);\n  if (!options.cookies) {\n    const jar = new CookieJar();\n    addCookies(jar, cookies);\n    options.cookies = { jar };\n  }\n  return {\n    dispatcher: new CookieAgent(options),\n    localAddress: options.localAddress,\n    jar: options.cookies.jar,\n  };\n});\n\nexports.createProxyAgent = (options, cookies = []) => {\n  if (!cookies) cookies = [];\n  if (typeof options === \"string\") options = { uri: options };\n  const jar = new CookieJar();\n  addCookies(jar, cookies);\n\n  // ProxyAgent type that node httplibrary supports\n  const agent = new HttpsProxyAgent(options.uri);\n\n  // ProxyAgent type that undici supports\n  const dispatcher = new ProxyAgent(options).compose(cookie({ jar }));\n\n  return { dispatcher, agent, jar, localAddress: options.localAddress };\n};\n\nexports.defaultAgent = createAgent();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi9hZ2VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLGFBQWEsRUFBRSxtQkFBTyxDQUFDLG9EQUFRO0FBQ3ZDLFFBQVEsa0JBQWtCLEVBQUUsbUJBQU8sQ0FBQywrR0FBbUI7QUFDdkQsUUFBUSxxQ0FBcUMsRUFBRSxtQkFBTyxDQUFDLDRFQUFjO0FBQ3JFLFFBQVEsc0JBQXNCLEVBQUUsbUJBQU8sQ0FBQyx3RkFBMEI7O0FBRWxFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVAsb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixtQkFBbUIsMkJBQTJCO0FBQ25FLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCx3QkFBd0I7QUFDeEI7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsOERBQThELEtBQUs7O0FBRW5FLFdBQVc7QUFDWDs7QUFFQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95dC1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL0BkaXN0dWJlL3l0ZGwtY29yZS9saWIvYWdlbnQuanM/ZWMzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFByb3h5QWdlbnQgfSA9IHJlcXVpcmUoXCJ1bmRpY2lcIik7XG5jb25zdCB7IEh0dHBzUHJveHlBZ2VudCB9ID0gcmVxdWlyZShcImh0dHBzLXByb3h5LWFnZW50XCIpO1xuY29uc3QgeyBDb29raWUsIENvb2tpZUphciwgY2Fub25pY2FsRG9tYWluIH0gPSByZXF1aXJlKFwidG91Z2gtY29va2llXCIpO1xuY29uc3QgeyBDb29raWVBZ2VudCwgY29va2llIH0gPSByZXF1aXJlKFwiaHR0cC1jb29raWUtYWdlbnQvdW5kaWNpXCIpO1xuXG5jb25zdCBjb252ZXJ0U2FtZVNpdGUgPSBzYW1lU2l0ZSA9PiB7XG4gIHN3aXRjaCAoc2FtZVNpdGUpIHtcbiAgICBjYXNlIFwic3RyaWN0XCI6XG4gICAgICByZXR1cm4gXCJzdHJpY3RcIjtcbiAgICBjYXNlIFwibGF4XCI6XG4gICAgICByZXR1cm4gXCJsYXhcIjtcbiAgICBjYXNlIFwibm9fcmVzdHJpY3Rpb25cIjpcbiAgICBjYXNlIFwidW5zcGVjaWZpZWRcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG59O1xuXG5jb25zdCBjb252ZXJ0Q29va2llID0gY29va2llID0+XG4gIGNvb2tpZSBpbnN0YW5jZW9mIENvb2tpZVxuICAgID8gY29va2llXG4gICAgOiBuZXcgQ29va2llKHtcbiAgICAgICAga2V5OiBjb29raWUubmFtZSxcbiAgICAgICAgdmFsdWU6IGNvb2tpZS52YWx1ZSxcbiAgICAgICAgZXhwaXJlczogdHlwZW9mIGNvb2tpZS5leHBpcmF0aW9uRGF0ZSA9PT0gXCJudW1iZXJcIiA/IG5ldyBEYXRlKGNvb2tpZS5leHBpcmF0aW9uRGF0ZSAqIDEwMDApIDogXCJJbmZpbml0eVwiLFxuICAgICAgICBkb21haW46IGNhbm9uaWNhbERvbWFpbihjb29raWUuZG9tYWluKSxcbiAgICAgICAgcGF0aDogY29va2llLnBhdGgsXG4gICAgICAgIHNlY3VyZTogY29va2llLnNlY3VyZSxcbiAgICAgICAgaHR0cE9ubHk6IGNvb2tpZS5odHRwT25seSxcbiAgICAgICAgc2FtZVNpdGU6IGNvbnZlcnRTYW1lU2l0ZShjb29raWUuc2FtZVNpdGUpLFxuICAgICAgICBob3N0T25seTogY29va2llLmhvc3RPbmx5LFxuICAgICAgfSk7XG5cbmNvbnN0IGFkZENvb2tpZXMgPSAoZXhwb3J0cy5hZGRDb29raWVzID0gKGphciwgY29va2llcykgPT4ge1xuICBpZiAoIWNvb2tpZXMgfHwgIUFycmF5LmlzQXJyYXkoY29va2llcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb29raWVzIG11c3QgYmUgYW4gYXJyYXlcIik7XG4gIH1cbiAgaWYgKCFjb29raWVzLnNvbWUoYyA9PiBjLm5hbWUgPT09IFwiU09DU1wiKSkge1xuICAgIGNvb2tpZXMucHVzaCh7XG4gICAgICBkb21haW46IFwiLnlvdXR1YmUuY29tXCIsXG4gICAgICBob3N0T25seTogZmFsc2UsXG4gICAgICBodHRwT25seTogZmFsc2UsXG4gICAgICBuYW1lOiBcIlNPQ1NcIixcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgc2FtZVNpdGU6IFwibGF4XCIsXG4gICAgICBzZWN1cmU6IHRydWUsXG4gICAgICBzZXNzaW9uOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBcIkNBSVwiLFxuICAgIH0pO1xuICB9XG4gIGZvciAoY29uc3QgY29va2llIG9mIGNvb2tpZXMpIHtcbiAgICBqYXIuc2V0Q29va2llU3luYyhjb252ZXJ0Q29va2llKGNvb2tpZSksIFwiaHR0cHM6Ly93d3cueW91dHViZS5jb21cIik7XG4gIH1cbn0pO1xuXG5leHBvcnRzLmFkZENvb2tpZXNGcm9tU3RyaW5nID0gKGphciwgY29va2llcykgPT4ge1xuICBpZiAoIWNvb2tpZXMgfHwgdHlwZW9mIGNvb2tpZXMgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb29raWVzIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gIH1cbiAgcmV0dXJuIGFkZENvb2tpZXMoXG4gICAgamFyLFxuICAgIGNvb2tpZXNcbiAgICAgIC5zcGxpdChcIjtcIilcbiAgICAgIC5tYXAoYyA9PiBDb29raWUucGFyc2UoYykpXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pLFxuICApO1xufTtcblxuY29uc3QgY3JlYXRlQWdlbnQgPSAoZXhwb3J0cy5jcmVhdGVBZ2VudCA9IChjb29raWVzID0gW10sIG9wdHMgPSB7fSkgPT4ge1xuICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cyk7XG4gIGlmICghb3B0aW9ucy5jb29raWVzKSB7XG4gICAgY29uc3QgamFyID0gbmV3IENvb2tpZUphcigpO1xuICAgIGFkZENvb2tpZXMoamFyLCBjb29raWVzKTtcbiAgICBvcHRpb25zLmNvb2tpZXMgPSB7IGphciB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgZGlzcGF0Y2hlcjogbmV3IENvb2tpZUFnZW50KG9wdGlvbnMpLFxuICAgIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MsXG4gICAgamFyOiBvcHRpb25zLmNvb2tpZXMuamFyLFxuICB9O1xufSk7XG5cbmV4cG9ydHMuY3JlYXRlUHJveHlBZ2VudCA9IChvcHRpb25zLCBjb29raWVzID0gW10pID0+IHtcbiAgaWYgKCFjb29raWVzKSBjb29raWVzID0gW107XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikgb3B0aW9ucyA9IHsgdXJpOiBvcHRpb25zIH07XG4gIGNvbnN0IGphciA9IG5ldyBDb29raWVKYXIoKTtcbiAgYWRkQ29va2llcyhqYXIsIGNvb2tpZXMpO1xuXG4gIC8vIFByb3h5QWdlbnQgdHlwZSB0aGF0IG5vZGUgaHR0cGxpYnJhcnkgc3VwcG9ydHNcbiAgY29uc3QgYWdlbnQgPSBuZXcgSHR0cHNQcm94eUFnZW50KG9wdGlvbnMudXJpKTtcblxuICAvLyBQcm94eUFnZW50IHR5cGUgdGhhdCB1bmRpY2kgc3VwcG9ydHNcbiAgY29uc3QgZGlzcGF0Y2hlciA9IG5ldyBQcm94eUFnZW50KG9wdGlvbnMpLmNvbXBvc2UoY29va2llKHsgamFyIH0pKTtcblxuICByZXR1cm4geyBkaXNwYXRjaGVyLCBhZ2VudCwgamFyLCBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHRBZ2VudCA9IGNyZWF0ZUFnZW50KCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/cache.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { setTimeout } = __webpack_require__(/*! timers */ \"timers\");\n\n// A cache that expires.\nmodule.exports = class Cache extends Map {\n  constructor(timeout = 1000) {\n    super();\n    this.timeout = timeout;\n  }\n  set(key, value) {\n    if (this.has(key)) {\n      clearTimeout(super.get(key).tid);\n    }\n    super.set(key, {\n      tid: setTimeout(this.delete.bind(this, key), this.timeout).unref(),\n      value,\n    });\n  }\n  get(key) {\n    let entry = super.get(key);\n    if (entry) {\n      return entry.value;\n    }\n    return null;\n  }\n  getOrSet(key, fn) {\n    if (this.has(key)) {\n      return this.get(key);\n    } else {\n      let value = fn();\n      this.set(key, value);\n      (async () => {\n        try {\n          await value;\n        } catch (err) {\n          this.delete(key);\n        }\n      })();\n      return value;\n    }\n  }\n  delete(key) {\n    let entry = super.get(key);\n    if (entry) {\n      clearTimeout(entry.tid);\n      super.delete(key);\n    }\n  }\n  clear() {\n    for (let entry of this.values()) {\n      clearTimeout(entry.tid);\n    }\n    super.clear();\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLGFBQWEsRUFBRSxtQkFBTyxDQUFDLHNCQUFROztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veXQtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9AZGlzdHViZS95dGRsLWNvcmUvbGliL2NhY2hlLmpzP2YwMzgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBzZXRUaW1lb3V0IH0gPSByZXF1aXJlKFwidGltZXJzXCIpO1xuXG4vLyBBIGNhY2hlIHRoYXQgZXhwaXJlcy5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ2FjaGUgZXh0ZW5kcyBNYXAge1xuICBjb25zdHJ1Y3Rvcih0aW1lb3V0ID0gMTAwMCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgfVxuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3VwZXIuZ2V0KGtleSkudGlkKTtcbiAgICB9XG4gICAgc3VwZXIuc2V0KGtleSwge1xuICAgICAgdGlkOiBzZXRUaW1lb3V0KHRoaXMuZGVsZXRlLmJpbmQodGhpcywga2V5KSwgdGhpcy50aW1lb3V0KS51bnJlZigpLFxuICAgICAgdmFsdWUsXG4gICAgfSk7XG4gIH1cbiAgZ2V0KGtleSkge1xuICAgIGxldCBlbnRyeSA9IHN1cGVyLmdldChrZXkpO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBnZXRPclNldChrZXksIGZuKSB7XG4gICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdmFsdWUgPSBmbigpO1xuICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxuICBkZWxldGUoa2V5KSB7XG4gICAgbGV0IGVudHJ5ID0gc3VwZXIuZ2V0KGtleSk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBjbGVhclRpbWVvdXQoZW50cnkudGlkKTtcbiAgICAgIHN1cGVyLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfVxuICBjbGVhcigpIHtcbiAgICBmb3IgKGxldCBlbnRyeSBvZiB0aGlzLnZhbHVlcygpKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZW50cnkudGlkKTtcbiAgICB9XG4gICAgc3VwZXIuY2xlYXIoKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/format-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst FORMATS = __webpack_require__(/*! ./formats */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/formats.js\");\n\n// Use these to help sort formats, higher index is better.\nconst audioEncodingRanks = [\"mp4a\", \"mp3\", \"vorbis\", \"aac\", \"opus\", \"flac\"];\nconst videoEncodingRanks = [\"mp4v\", \"avc1\", \"Sorenson H.283\", \"MPEG-4 Visual\", \"VP8\", \"VP9\", \"H.264\"];\n\nconst getVideoBitrate = format => format.bitrate || 0;\nconst getVideoEncodingRank = format => videoEncodingRanks.findIndex(enc => format.codecs?.includes(enc));\nconst getAudioBitrate = format => format.audioBitrate || 0;\nconst getAudioEncodingRank = format => audioEncodingRanks.findIndex(enc => format.codecs?.includes(enc));\n\n/**\n * Sort formats by a list of functions.\n *\n * @param {Object} a\n * @param {Object} b\n * @param {Array.<Function>} sortBy\n * @returns {number}\n */\nconst sortFormatsBy = (a, b, sortBy) => {\n  let res = 0;\n  for (let fn of sortBy) {\n    res = fn(b) - fn(a);\n    if (res !== 0) {\n      break;\n    }\n  }\n  return res;\n};\n\nconst sortFormatsByVideo = (a, b) =>\n  sortFormatsBy(a, b, [format => parseInt(format.qualityLabel), getVideoBitrate, getVideoEncodingRank]);\n\nconst sortFormatsByAudio = (a, b) => sortFormatsBy(a, b, [getAudioBitrate, getAudioEncodingRank]);\n\n/**\n * Sort formats from highest quality to lowest.\n *\n * @param {Object} a\n * @param {Object} b\n * @returns {number}\n */\nexports.sortFormats = (a, b) =>\n  sortFormatsBy(a, b, [\n    // Formats with both video and audio are ranked highest.\n    format => +!!format.isHLS,\n    format => +!!format.isDashMPD,\n    format => +(format.contentLength > 0),\n    format => +(format.hasVideo && format.hasAudio),\n    format => +format.hasVideo,\n    format => parseInt(format.qualityLabel) || 0,\n    getVideoBitrate,\n    getAudioBitrate,\n    getVideoEncodingRank,\n    getAudioEncodingRank,\n  ]);\n\n/**\n * Choose a format depending on the given options.\n *\n * @param {Array.<Object>} formats\n * @param {Object} options\n * @returns {Object}\n * @throws {Error} when no format matches the filter/format rules\n */\nexports.chooseFormat = (formats, options) => {\n  if (typeof options.format === \"object\") {\n    if (!options.format.url) {\n      throw Error(\"Invalid format given, did you use `ytdl.getInfo()`?\");\n    }\n    return options.format;\n  }\n\n  if (options.filter) {\n    formats = exports.filterFormats(formats, options.filter);\n  }\n\n  // We currently only support HLS-Formats for livestreams\n  // So we (now) remove all non-HLS streams\n  if (formats.some(fmt => fmt.isHLS)) {\n    formats = formats.filter(fmt => fmt.isHLS || !fmt.isLive);\n  }\n\n  let format;\n  const quality = options.quality || \"highest\";\n  switch (quality) {\n    case \"highest\":\n      format = formats[0];\n      break;\n\n    case \"lowest\":\n      format = formats[formats.length - 1];\n      break;\n\n    case \"highestaudio\": {\n      formats = exports.filterFormats(formats, \"audio\");\n      formats.sort(sortFormatsByAudio);\n      // Filter for only the best audio format\n      const bestAudioFormat = formats[0];\n      formats = formats.filter(f => sortFormatsByAudio(bestAudioFormat, f) === 0);\n      // Check for the worst video quality for the best audio quality and pick according\n      // This does not loose default sorting of video encoding and bitrate\n      const worstVideoQuality = formats.map(f => parseInt(f.qualityLabel) || 0).sort((a, b) => a - b)[0];\n      format = formats.find(f => (parseInt(f.qualityLabel) || 0) === worstVideoQuality);\n      break;\n    }\n\n    case \"lowestaudio\":\n      formats = exports.filterFormats(formats, \"audio\");\n      formats.sort(sortFormatsByAudio);\n      format = formats[formats.length - 1];\n      break;\n\n    case \"highestvideo\": {\n      formats = exports.filterFormats(formats, \"video\");\n      formats.sort(sortFormatsByVideo);\n      // Filter for only the best video format\n      const bestVideoFormat = formats[0];\n      formats = formats.filter(f => sortFormatsByVideo(bestVideoFormat, f) === 0);\n      // Check for the worst audio quality for the best video quality and pick according\n      // This does not loose default sorting of audio encoding and bitrate\n      const worstAudioQuality = formats.map(f => f.audioBitrate || 0).sort((a, b) => a - b)[0];\n      format = formats.find(f => (f.audioBitrate || 0) === worstAudioQuality);\n      break;\n    }\n\n    case \"lowestvideo\":\n      formats = exports.filterFormats(formats, \"video\");\n      formats.sort(sortFormatsByVideo);\n      format = formats[formats.length - 1];\n      break;\n\n    default:\n      format = getFormatByQuality(quality, formats);\n      break;\n  }\n\n  if (!format) {\n    throw Error(`No such format found: ${quality}`);\n  }\n  return format;\n};\n\n/**\n * Gets a format based on quality or array of quality's\n *\n * @param {string|[string]} quality\n * @param {[Object]} formats\n * @returns {Object}\n */\nconst getFormatByQuality = (quality, formats) => {\n  let getFormat = itag => formats.find(format => `${format.itag}` === `${itag}`);\n  if (Array.isArray(quality)) {\n    return getFormat(quality.find(q => getFormat(q)));\n  } else {\n    return getFormat(quality);\n  }\n};\n\n/**\n * @param {Array.<Object>} formats\n * @param {Function} filter\n * @returns {Array.<Object>}\n */\nexports.filterFormats = (formats, filter) => {\n  let fn;\n  switch (filter) {\n    case \"videoandaudio\":\n    case \"audioandvideo\":\n      fn = format => format.hasVideo && format.hasAudio;\n      break;\n\n    case \"video\":\n      fn = format => format.hasVideo;\n      break;\n\n    case \"videoonly\":\n      fn = format => format.hasVideo && !format.hasAudio;\n      break;\n\n    case \"audio\":\n      fn = format => format.hasAudio;\n      break;\n\n    case \"audioonly\":\n      fn = format => !format.hasVideo && format.hasAudio;\n      break;\n\n    default:\n      if (typeof filter === \"function\") {\n        fn = filter;\n      } else {\n        throw TypeError(`Given filter (${filter}) is not supported`);\n      }\n  }\n  return formats.filter(format => !!format.url && fn(format));\n};\n\n/**\n * @param {Object} format\n * @returns {Object}\n */\nexports.addFormatMeta = format => {\n  format = Object.assign({}, FORMATS[format.itag], format);\n  format.hasVideo = !!format.qualityLabel;\n  format.hasAudio = !!format.audioBitrate;\n  format.container = format.mimeType ? format.mimeType.split(\";\")[0].split(\"/\")[1] : null;\n  format.codecs = format.mimeType ? utils.between(format.mimeType, 'codecs=\"', '\"') : null;\n  format.videoCodec = format.hasVideo && format.codecs ? format.codecs.split(\", \")[0] : null;\n  format.audioCodec = format.hasAudio && format.codecs ? format.codecs.split(\", \").slice(-1)[0] : null;\n  format.isLive = /\\bsource[/=]yt_live_broadcast\\b/.test(format.url);\n  format.isHLS = /\\/manifest\\/hls_(variant|playlist)\\//.test(format.url);\n  format.isDashMPD = /\\/manifest\\/dash\\//.test(format.url);\n  return format;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/formats.js":
/*!********************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/formats.js ***!
  \********************************************************/
/***/ ((module) => {

eval("/**\n * http://en.wikipedia.org/wiki/YouTube#Quality_and_formats\n */\nmodule.exports = {\n  5: {\n    mimeType: 'video/flv; codecs=\"Sorenson H.283, mp3\"',\n    qualityLabel: \"240p\",\n    bitrate: 250000,\n    audioBitrate: 64,\n  },\n\n  6: {\n    mimeType: 'video/flv; codecs=\"Sorenson H.263, mp3\"',\n    qualityLabel: \"270p\",\n    bitrate: 800000,\n    audioBitrate: 64,\n  },\n\n  13: {\n    mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n    qualityLabel: null,\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  17: {\n    mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n    qualityLabel: \"144p\",\n    bitrate: 50000,\n    audioBitrate: 24,\n  },\n\n  18: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 96,\n  },\n\n  22: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 192,\n  },\n\n  34: {\n    mimeType: 'video/flv; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 128,\n  },\n\n  35: {\n    mimeType: 'video/flv; codecs=\"H.264, aac\"',\n    qualityLabel: \"480p\",\n    bitrate: 800000,\n    audioBitrate: 128,\n  },\n\n  36: {\n    mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 175000,\n    audioBitrate: 32,\n  },\n\n  37: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 3000000,\n    audioBitrate: 192,\n  },\n\n  38: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"3072p\",\n    bitrate: 3500000,\n    audioBitrate: 192,\n  },\n\n  43: {\n    mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 128,\n  },\n\n  44: {\n    mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"480p\",\n    bitrate: 1000000,\n    audioBitrate: 128,\n  },\n\n  45: {\n    mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 192,\n  },\n\n  46: {\n    mimeType: 'audio/webm; codecs=\"vp8, vorbis\"',\n    qualityLabel: \"1080p\",\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  82: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 96,\n  },\n\n  83: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 500000,\n    audioBitrate: 96,\n  },\n\n  84: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 192,\n  },\n\n  85: {\n    mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 3000000,\n    audioBitrate: 192,\n  },\n\n  91: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"144p\",\n    bitrate: 100000,\n    audioBitrate: 48,\n  },\n\n  92: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 150000,\n    audioBitrate: 48,\n  },\n\n  93: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"360p\",\n    bitrate: 500000,\n    audioBitrate: 128,\n  },\n\n  94: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"480p\",\n    bitrate: 800000,\n    audioBitrate: 128,\n  },\n\n  95: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 1500000,\n    audioBitrate: 256,\n  },\n\n  96: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: 256,\n  },\n\n  100: {\n    mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"360p\",\n    bitrate: null,\n    audioBitrate: 128,\n  },\n\n  101: {\n    mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"360p\",\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  102: {\n    mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n    qualityLabel: \"720p\",\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  120: {\n    mimeType: 'video/flv; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 2000000,\n    audioBitrate: 128,\n  },\n\n  127: {\n    mimeType: 'audio/ts; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 96,\n  },\n\n  128: {\n    mimeType: 'audio/ts; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 96,\n  },\n\n  132: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"240p\",\n    bitrate: 150000,\n    audioBitrate: 48,\n  },\n\n  133: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"240p\",\n    bitrate: 200000,\n    audioBitrate: null,\n  },\n\n  134: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"360p\",\n    bitrate: 300000,\n    audioBitrate: null,\n  },\n\n  135: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"480p\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  136: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"720p\",\n    bitrate: 1000000,\n    audioBitrate: null,\n  },\n\n  137: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  138: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"4320p\",\n    bitrate: 13500000,\n    audioBitrate: null,\n  },\n\n  139: {\n    mimeType: 'audio/mp4; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 48,\n  },\n\n  140: {\n    mimeType: 'audio/m4a; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 128,\n  },\n\n  141: {\n    mimeType: 'audio/mp4; codecs=\"aac\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 256,\n  },\n\n  151: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 50000,\n    audioBitrate: 24,\n  },\n\n  160: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"144p\",\n    bitrate: 100000,\n    audioBitrate: null,\n  },\n\n  171: {\n    mimeType: 'audio/webm; codecs=\"vorbis\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 128,\n  },\n\n  172: {\n    mimeType: 'audio/webm; codecs=\"vorbis\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 192,\n  },\n\n  231: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"480p\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  232: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 800000,\n    audioBitrate: null,\n  },\n\n  242: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"240p\",\n    bitrate: 100000,\n    audioBitrate: null,\n  },\n\n  243: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"360p\",\n    bitrate: 250000,\n    audioBitrate: null,\n  },\n\n  244: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"480p\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  247: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p\",\n    bitrate: 700000,\n    audioBitrate: null,\n  },\n\n  248: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1080p\",\n    bitrate: 1500000,\n    audioBitrate: null,\n  },\n\n  249: {\n    mimeType: 'audio/webm; codecs=\"opus\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 48,\n  },\n\n  250: {\n    mimeType: 'audio/webm; codecs=\"opus\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 64,\n  },\n\n  251: {\n    mimeType: 'audio/webm; codecs=\"opus\"',\n    qualityLabel: null,\n    bitrate: null,\n    audioBitrate: 160,\n  },\n\n  264: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1440p\",\n    bitrate: 4000000,\n    audioBitrate: null,\n  },\n\n  266: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"2160p\",\n    bitrate: 12500000,\n    audioBitrate: null,\n  },\n\n  270: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  271: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1440p\",\n    bitrate: 9000000,\n    audioBitrate: null,\n  },\n\n  272: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"4320p\",\n    bitrate: 20000000,\n    audioBitrate: null,\n  },\n\n  278: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"144p 30fps\",\n    bitrate: 80000,\n    audioBitrate: null,\n  },\n\n  298: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"720p\",\n    bitrate: 3000000,\n    audioBitrate: null,\n  },\n\n  299: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 5500000,\n    audioBitrate: null,\n  },\n\n  300: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"720p\",\n    bitrate: 1318000,\n    audioBitrate: 48,\n  },\n\n  301: {\n    mimeType: 'video/ts; codecs=\"H.264, aac\"',\n    qualityLabel: \"1080p\",\n    bitrate: 3000000,\n    audioBitrate: 128,\n  },\n\n  302: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p HFR\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  303: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1080p HFR\",\n    bitrate: 5000000,\n    audioBitrate: null,\n  },\n\n  308: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1440p HFR\",\n    bitrate: 10000000,\n    audioBitrate: null,\n  },\n\n  311: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p\",\n    bitrate: 1250000,\n    audioBitrate: null,\n  },\n\n  312: {\n    mimeType: 'video/mp4; codecs=\"H.264\"',\n    qualityLabel: \"1080p\",\n    bitrate: 2500000,\n    audioBitrate: null,\n  },\n\n  313: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"2160p\",\n    bitrate: 13000000,\n    audioBitrate: null,\n  },\n\n  315: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"2160p HFR\",\n    bitrate: 20000000,\n    audioBitrate: null,\n  },\n\n  330: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"144p HDR, HFR\",\n    bitrate: 80000,\n    audioBitrate: null,\n  },\n\n  331: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"240p HDR, HFR\",\n    bitrate: 100000,\n    audioBitrate: null,\n  },\n\n  332: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"360p HDR, HFR\",\n    bitrate: 250000,\n    audioBitrate: null,\n  },\n\n  333: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"240p HDR, HFR\",\n    bitrate: 500000,\n    audioBitrate: null,\n  },\n\n  334: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"720p HDR, HFR\",\n    bitrate: 1000000,\n    audioBitrate: null,\n  },\n\n  335: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1080p HDR, HFR\",\n    bitrate: 1500000,\n    audioBitrate: null,\n  },\n\n  336: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"1440p HDR, HFR\",\n    bitrate: 5000000,\n    audioBitrate: null,\n  },\n\n  337: {\n    mimeType: 'video/webm; codecs=\"VP9\"',\n    qualityLabel: \"2160p HDR, HFR\",\n    bitrate: 12000000,\n    audioBitrate: null,\n  },\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/formats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst getInfo = __webpack_require__(/*! ./info */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/info.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst formatUtils = __webpack_require__(/*! ./format-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js\");\nconst urlUtils = __webpack_require__(/*! ./url-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js\");\nconst miniget = __webpack_require__(/*! miniget */ \"(rsc)/./node_modules/miniget/dist/index.js\");\nconst m3u8stream = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\nconst { parseTimestamp } = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\nconst agent = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js\");\n\n/**\n * @param {string} link\n * @param {!Object} options\n * @returns {ReadableStream}\n */\nconst ytdl = (link, options) => {\n  const stream = createStream(options);\n  ytdl.getInfo(link, options).then(\n    info => {\n      downloadFromInfoCallback(stream, info, options);\n    },\n    stream.emit.bind(stream, \"error\"),\n  );\n  return stream;\n};\nmodule.exports = ytdl;\n\nytdl.getBasicInfo = getInfo.getBasicInfo;\nytdl.getInfo = getInfo.getInfo;\nytdl.chooseFormat = formatUtils.chooseFormat;\nytdl.filterFormats = formatUtils.filterFormats;\nytdl.validateID = urlUtils.validateID;\nytdl.validateURL = urlUtils.validateURL;\nytdl.getURLVideoID = urlUtils.getURLVideoID;\nytdl.getVideoID = urlUtils.getVideoID;\nytdl.createAgent = agent.createAgent;\nytdl.createProxyAgent = agent.createProxyAgent;\nytdl.cache = {\n  info: getInfo.cache,\n  watch: getInfo.watchPageCache,\n};\nytdl.version = (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@distube/ytdl-core/package.json\").version);\n\nconst createStream = options => {\n  const stream = new PassThrough({ highWaterMark: options?.highWaterMark || 1024 * 512 });\n  stream._destroy = () => {\n    stream.destroyed = true;\n  };\n  return stream;\n};\n\nconst pipeAndSetEvents = (req, stream, end) => {\n  // Forward events from the request to the stream.\n  [\"abort\", \"request\", \"response\", \"error\", \"redirect\", \"retry\", \"reconnect\"].forEach(event => {\n    req.prependListener(event, stream.emit.bind(stream, event));\n  });\n  req.pipe(stream, { end });\n};\n\n/**\n * Chooses a format to download.\n *\n * @param {stream.Readable} stream\n * @param {Object} info\n * @param {Object} options\n */\nconst downloadFromInfoCallback = (stream, info, options) => {\n  options = options || {};\n\n  let err = utils.playError(info.player_response);\n  if (err) {\n    stream.emit(\"error\", err);\n    return;\n  }\n\n  if (!info.formats.length) {\n    stream.emit(\"error\", Error(\"This video is unavailable\"));\n    return;\n  }\n\n  let format;\n  try {\n    format = formatUtils.chooseFormat(info.formats, options);\n  } catch (e) {\n    stream.emit(\"error\", e);\n    return;\n  }\n  stream.emit(\"info\", info, format);\n  if (stream.destroyed) {\n    return;\n  }\n\n  let contentLength,\n    downloaded = 0;\n  const ondata = chunk => {\n    downloaded += chunk.length;\n    stream.emit(\"progress\", chunk.length, downloaded, contentLength);\n  };\n\n  utils.applyDefaultHeaders(options);\n  if (options.IPv6Block) {\n    options.requestOptions = Object.assign({}, options.requestOptions, {\n      localAddress: utils.getRandomIPv6(options.IPv6Block),\n    });\n  }\n\n  if (options.agent) {\n    // Set agent on both the miniget and m3u8stream requests\n    options.requestOptions.agent = options.agent.agent;\n\n    if (options.agent.jar) {\n      utils.setPropInsensitive(\n        options.requestOptions.headers,\n        \"cookie\",\n        options.agent.jar.getCookieStringSync(\"https://www.youtube.com\"),\n      );\n    }\n    if (options.agent.localAddress) {\n      options.requestOptions.localAddress = options.agent.localAddress;\n    }\n  }\n\n  // Download the file in chunks, in this case the default is 10MB,\n  // anything over this will cause youtube to throttle the download\n  const dlChunkSize = typeof options.dlChunkSize === \"number\" ? options.dlChunkSize : 1024 * 1024 * 10;\n  let req;\n  let shouldEnd = true;\n\n  if (format.isHLS || format.isDashMPD) {\n    req = m3u8stream(format.url, {\n      chunkReadahead: +info.live_chunk_readahead,\n      begin: options.begin || (format.isLive && Date.now()),\n      liveBuffer: options.liveBuffer,\n      // Now we have passed not only custom \"dispatcher\" with undici ProxyAgent, but also \"agent\" field which is compatible for node http\n      requestOptions: options.requestOptions,\n      parser: format.isDashMPD ? \"dash-mpd\" : \"m3u8\",\n      id: format.itag,\n    });\n\n    req.on(\"progress\", (segment, totalSegments) => {\n      stream.emit(\"progress\", segment.size, segment.num, totalSegments);\n    });\n    pipeAndSetEvents(req, stream, shouldEnd);\n  } else {\n    const requestOptions = Object.assign({}, options.requestOptions, {\n      maxReconnects: 6,\n      maxRetries: 3,\n      backoff: { inc: 500, max: 10000 },\n    });\n\n    let shouldBeChunked = dlChunkSize !== 0 && (!format.hasAudio || !format.hasVideo);\n\n    if (shouldBeChunked) {\n      let start = options.range?.start || 0;\n      let end = start + dlChunkSize;\n      const rangeEnd = options.range?.end;\n\n      contentLength = options.range\n        ? (rangeEnd ? rangeEnd + 1 : parseInt(format.contentLength)) - start\n        : parseInt(format.contentLength);\n\n      const getNextChunk = () => {\n        if (stream.destroyed) return;\n        if (!rangeEnd && end >= contentLength) end = 0;\n        if (rangeEnd && end > rangeEnd) end = rangeEnd;\n        shouldEnd = !end || end === rangeEnd;\n\n        requestOptions.headers = Object.assign({}, requestOptions.headers, {\n          Range: `bytes=${start}-${end || \"\"}`,\n        });\n        req = miniget(format.url, requestOptions);\n        req.on(\"data\", ondata);\n        req.on(\"end\", () => {\n          if (stream.destroyed) return;\n          if (end && end !== rangeEnd) {\n            start = end + 1;\n            end += dlChunkSize;\n            getNextChunk();\n          }\n        });\n        pipeAndSetEvents(req, stream, shouldEnd);\n      };\n      getNextChunk();\n    } else {\n      // Audio only and video only formats don't support begin\n      if (options.begin) {\n        format.url += `&begin=${parseTimestamp(options.begin)}`;\n      }\n      if (options.range?.start || options.range?.end) {\n        requestOptions.headers = Object.assign({}, requestOptions.headers, {\n          Range: `bytes=${options.range.start || \"0\"}-${options.range.end || \"\"}`,\n        });\n      }\n      req = miniget(format.url, requestOptions);\n      req.on(\"response\", res => {\n        if (stream.destroyed) return;\n        contentLength = contentLength || parseInt(res.headers[\"content-length\"]);\n      });\n      req.on(\"data\", ondata);\n      pipeAndSetEvents(req, stream, shouldEnd);\n    }\n  }\n\n  stream._destroy = () => {\n    stream.destroyed = true;\n    if (req) {\n      req.destroy();\n      req.end();\n    }\n  };\n};\n\n/**\n * Can be used to download video after its `info` is gotten through\n * `ytdl.getInfo()`. In case the user might want to look at the\n * `info` object before deciding to download.\n *\n * @param {Object} info\n * @param {!Object} options\n * @returns {ReadableStream}\n */\nytdl.downloadFromInfo = (info, options) => {\n  const stream = createStream(options);\n  if (!info.full) {\n    throw Error(\"Cannot use `ytdl.downloadFromInfo()` when called with info from `ytdl.getBasicInfo()`\");\n  }\n  setImmediate(() => {\n    downloadFromInfoCallback(stream, info, options);\n  });\n  return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/info-extras.js":
/*!************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/info-extras.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst qs = __webpack_require__(/*! querystring */ \"querystring\");\nconst { parseTimestamp } = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\n\nconst BASE_URL = \"https://www.youtube.com/watch?v=\";\nconst TITLE_TO_CATEGORY = {\n  song: { name: \"Music\", url: \"https://music.youtube.com/\" },\n};\n\nconst getText = obj => obj?.runs?.[0]?.text ?? obj?.simpleText;\n\n/**\n * Get video media.\n *\n * @param {Object} info\n * @returns {Object}\n */\nexports.getMedia = info => {\n  let media = {};\n  let results = [];\n  try {\n    results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n  } catch (err) {\n    // Do nothing\n  }\n\n  let result = results.find(v => v.videoSecondaryInfoRenderer);\n  if (!result) {\n    return {};\n  }\n\n  try {\n    let metadataRows = (result.metadataRowContainer || result.videoSecondaryInfoRenderer.metadataRowContainer)\n      .metadataRowContainerRenderer.rows;\n    for (let row of metadataRows) {\n      if (row.metadataRowRenderer) {\n        let title = getText(row.metadataRowRenderer.title).toLowerCase();\n        let contents = row.metadataRowRenderer.contents[0];\n        media[title] = getText(contents);\n        let runs = contents.runs;\n        if (runs?.[0]?.navigationEndpoint) {\n          media[`${title}_url`] = new URL(\n            runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url,\n            BASE_URL,\n          ).toString();\n        }\n        if (title in TITLE_TO_CATEGORY) {\n          media.category = TITLE_TO_CATEGORY[title].name;\n          media.category_url = TITLE_TO_CATEGORY[title].url;\n        }\n      } else if (row.richMetadataRowRenderer) {\n        let contents = row.richMetadataRowRenderer.contents;\n        let boxArt = contents.filter(\n          meta => meta.richMetadataRenderer.style === \"RICH_METADATA_RENDERER_STYLE_BOX_ART\",\n        );\n        for (let { richMetadataRenderer } of boxArt) {\n          let meta = richMetadataRenderer;\n          media.year = getText(meta.subtitle);\n          let type = getText(meta.callToAction).split(\" \")[1];\n          media[type] = getText(meta.title);\n          media[`${type}_url`] = new URL(meta.endpoint.commandMetadata.webCommandMetadata.url, BASE_URL).toString();\n          media.thumbnails = meta.thumbnail.thumbnails;\n        }\n        let topic = contents.filter(meta => meta.richMetadataRenderer.style === \"RICH_METADATA_RENDERER_STYLE_TOPIC\");\n        for (let { richMetadataRenderer } of topic) {\n          let meta = richMetadataRenderer;\n          media.category = getText(meta.title);\n          media.category_url = new URL(meta.endpoint.commandMetadata.webCommandMetadata.url, BASE_URL).toString();\n        }\n      }\n    }\n  } catch (err) {\n    // Do nothing.\n  }\n\n  return media;\n};\n\nconst isVerified = badges => !!badges?.find(b => b.metadataBadgeRenderer.tooltip === \"Verified\");\n\n/**\n * Get video author.\n *\n * @param {Object} info\n * @returns {Object}\n */\nexports.getAuthor = info => {\n  let channelId,\n    thumbnails = [],\n    subscriberCount,\n    verified = false;\n  try {\n    let results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let v = results.find(v2 => v2?.videoSecondaryInfoRenderer?.owner?.videoOwnerRenderer);\n    let videoOwnerRenderer = v.videoSecondaryInfoRenderer.owner.videoOwnerRenderer;\n    channelId = videoOwnerRenderer.navigationEndpoint.browseEndpoint.browseId;\n    thumbnails = videoOwnerRenderer.thumbnail.thumbnails.map(thumbnail => {\n      thumbnail.url = new URL(thumbnail.url, BASE_URL).toString();\n      return thumbnail;\n    });\n    subscriberCount = utils.parseAbbreviatedNumber(getText(videoOwnerRenderer.subscriberCountText));\n    verified = isVerified(videoOwnerRenderer.badges);\n  } catch (err) {\n    // Do nothing.\n  }\n  try {\n    let videoDetails = info.player_response.microformat?.playerMicroformatRenderer;\n    let id = videoDetails?.channelId || channelId || info.player_response.videoDetails.channelId;\n    let author = {\n      id: id,\n      name: videoDetails?.ownerChannelName ?? info.player_response.videoDetails.author,\n      user: videoDetails?.ownerProfileUrl.split(\"/\").slice(-1)[0] ?? null,\n      channel_url: `https://www.youtube.com/channel/${id}`,\n      external_channel_url: videoDetails ? `https://www.youtube.com/channel/${videoDetails.externalChannelId}` : \"\",\n      user_url: videoDetails ? new URL(videoDetails.ownerProfileUrl, BASE_URL).toString() : \"\",\n      thumbnails,\n      verified,\n      subscriber_count: subscriberCount,\n    };\n    if (thumbnails.length) {\n      utils.deprecate(author, \"avatar\", author.thumbnails[0].url, \"author.avatar\", \"author.thumbnails[0].url\");\n    }\n    return author;\n  } catch (err) {\n    return {};\n  }\n};\n\nconst parseRelatedVideo = (details, rvsParams) => {\n  if (!details) return;\n  try {\n    let viewCount = getText(details.viewCountText);\n    let shortViewCount = getText(details.shortViewCountText);\n    let rvsDetails = rvsParams.find(elem => elem.id === details.videoId);\n    if (!/^\\d/.test(shortViewCount)) {\n      shortViewCount = rvsDetails?.short_view_count_text || \"\";\n    }\n    viewCount = (/^\\d/.test(viewCount) ? viewCount : shortViewCount).split(\" \")[0];\n    let browseEndpoint = details.shortBylineText.runs[0].navigationEndpoint.browseEndpoint;\n    let channelId = browseEndpoint.browseId;\n    let name = getText(details.shortBylineText);\n    let user = (browseEndpoint.canonicalBaseUrl || \"\").split(\"/\").slice(-1)[0];\n    let video = {\n      id: details.videoId,\n      title: getText(details.title),\n      published: getText(details.publishedTimeText),\n      author: {\n        id: channelId,\n        name,\n        user,\n        channel_url: `https://www.youtube.com/channel/${channelId}`,\n        user_url: `https://www.youtube.com/user/${user}`,\n        thumbnails: details.channelThumbnail.thumbnails.map(thumbnail => {\n          thumbnail.url = new URL(thumbnail.url, BASE_URL).toString();\n          return thumbnail;\n        }),\n        verified: isVerified(details.ownerBadges),\n\n        [Symbol.toPrimitive]() {\n          console.warn(\n            `\\`relatedVideo.author\\` will be removed in a near future release, ` +\n              `use \\`relatedVideo.author.name\\` instead.`,\n          );\n          return video.author.name;\n        },\n      },\n      short_view_count_text: shortViewCount.split(\" \")[0],\n      view_count: viewCount.replace(/,/g, \"\"),\n      length_seconds: details.lengthText\n        ? Math.floor(parseTimestamp(getText(details.lengthText)) / 1000)\n        : rvsParams\n          ? `${rvsParams.length_seconds}`\n          : undefined,\n      thumbnails: details.thumbnail.thumbnails,\n      richThumbnails: details.richThumbnail\n        ? details.richThumbnail.movingThumbnailRenderer.movingThumbnailDetails.thumbnails\n        : [],\n      isLive: !!details.badges?.find(b => b.metadataBadgeRenderer.label === \"LIVE NOW\"),\n    };\n\n    utils.deprecate(\n      video,\n      \"author_thumbnail\",\n      video.author.thumbnails[0].url,\n      \"relatedVideo.author_thumbnail\",\n      \"relatedVideo.author.thumbnails[0].url\",\n    );\n    utils.deprecate(video, \"ucid\", video.author.id, \"relatedVideo.ucid\", \"relatedVideo.author.id\");\n    utils.deprecate(\n      video,\n      \"video_thumbnail\",\n      video.thumbnails[0].url,\n      \"relatedVideo.video_thumbnail\",\n      \"relatedVideo.thumbnails[0].url\",\n    );\n    return video;\n  } catch (err) {\n    // Skip.\n  }\n};\n\n/**\n * Get related videos.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\nexports.getRelatedVideos = info => {\n  let rvsParams = [],\n    secondaryResults = [];\n  try {\n    rvsParams = info.response.webWatchNextResponseExtensionData.relatedVideoArgs.split(\",\").map(e => qs.parse(e));\n  } catch (err) {\n    // Do nothing.\n  }\n  try {\n    secondaryResults = info.response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results;\n  } catch (err) {\n    return [];\n  }\n  let videos = [];\n  for (let result of secondaryResults || []) {\n    let details = result.compactVideoRenderer;\n    if (details) {\n      let video = parseRelatedVideo(details, rvsParams);\n      if (video) videos.push(video);\n    } else {\n      let autoplay = result.compactAutoplayRenderer || result.itemSectionRenderer;\n      if (!autoplay || !Array.isArray(autoplay.contents)) continue;\n      for (let content of autoplay.contents) {\n        let video = parseRelatedVideo(content.compactVideoRenderer, rvsParams);\n        if (video) videos.push(video);\n      }\n    }\n  }\n  return videos;\n};\n\n/**\n * Get like count.\n *\n * @param {Object} info\n * @returns {number}\n */\nexports.getLikes = info => {\n  try {\n    let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    let video = contents.find(r => r.videoPrimaryInfoRenderer);\n    let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n    let accessibilityText = buttons.find(b => b.segmentedLikeDislikeButtonViewModel).segmentedLikeDislikeButtonViewModel\n      .likeButtonViewModel.likeButtonViewModel.toggleButtonViewModel.toggleButtonViewModel.defaultButtonViewModel\n      .buttonViewModel.accessibilityText;\n    return parseInt(accessibilityText.match(/[\\d,.]+/)[0].replace(/\\D+/g, \"\"));\n  } catch (err) {\n    return null;\n  }\n};\n\n/**\n * Cleans up a few fields on `videoDetails`.\n *\n * @param {Object} videoDetails\n * @param {Object} info\n * @returns {Object}\n */\nexports.cleanVideoDetails = (videoDetails, info) => {\n  videoDetails.thumbnails = videoDetails.thumbnail.thumbnails;\n  delete videoDetails.thumbnail;\n  utils.deprecate(\n    videoDetails,\n    \"thumbnail\",\n    { thumbnails: videoDetails.thumbnails },\n    \"videoDetails.thumbnail.thumbnails\",\n    \"videoDetails.thumbnails\",\n  );\n  videoDetails.description = videoDetails.shortDescription || getText(videoDetails.description);\n  delete videoDetails.shortDescription;\n  utils.deprecate(\n    videoDetails,\n    \"shortDescription\",\n    videoDetails.description,\n    \"videoDetails.shortDescription\",\n    \"videoDetails.description\",\n  );\n\n  // Use more reliable `lengthSeconds` from `playerMicroformatRenderer`.\n  videoDetails.lengthSeconds =\n    info.player_response.microformat?.playerMicroformatRenderer?.lengthSeconds ||\n    info.player_response.videoDetails.lengthSeconds;\n  return videoDetails;\n};\n\n/**\n * Get storyboards info.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\nexports.getStoryboards = info => {\n  const parts = info.player_response?.storyboards?.playerStoryboardSpecRenderer?.spec?.split(\"|\");\n\n  if (!parts) return [];\n\n  const url = new URL(parts.shift());\n\n  return parts.map((part, i) => {\n    let [thumbnailWidth, thumbnailHeight, thumbnailCount, columns, rows, interval, nameReplacement, sigh] =\n      part.split(\"#\");\n\n    url.searchParams.set(\"sigh\", sigh);\n\n    thumbnailCount = parseInt(thumbnailCount, 10);\n    columns = parseInt(columns, 10);\n    rows = parseInt(rows, 10);\n\n    const storyboardCount = Math.ceil(thumbnailCount / (columns * rows));\n\n    return {\n      templateUrl: url.toString().replace(\"$L\", i).replace(\"$N\", nameReplacement),\n      thumbnailWidth: parseInt(thumbnailWidth, 10),\n      thumbnailHeight: parseInt(thumbnailHeight, 10),\n      thumbnailCount,\n      interval: parseInt(interval, 10),\n      columns,\n      rows,\n      storyboardCount,\n    };\n  });\n};\n\n/**\n * Get chapters info.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */\nexports.getChapters = info => {\n  const playerOverlayRenderer = info.response?.playerOverlays?.playerOverlayRenderer;\n  const playerBar = playerOverlayRenderer?.decoratedPlayerBarRenderer?.decoratedPlayerBarRenderer?.playerBar;\n  const markersMap = playerBar?.multiMarkersPlayerBarRenderer?.markersMap;\n  const marker = Array.isArray(markersMap) && markersMap.find(m => Array.isArray(m.value?.chapters));\n  if (!marker) return [];\n  const chapters = marker.value.chapters;\n\n  return chapters.map(chapter => ({\n    title: getText(chapter.chapterRenderer.title),\n    start_time: chapter.chapterRenderer.timeRangeStartMillis / 1000,\n  }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/info-extras.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/info.js":
/*!*****************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/info.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* eslint-disable no-unused-vars */\nconst sax = __webpack_require__(/*! sax */ \"(rsc)/./node_modules/sax/lib/sax.js\");\n\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\n// Forces Node JS version of setTimeout for Electron based applications\nconst { setTimeout } = __webpack_require__(/*! timers */ \"timers\");\nconst formatUtils = __webpack_require__(/*! ./format-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/format-utils.js\");\nconst urlUtils = __webpack_require__(/*! ./url-utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js\");\nconst extras = __webpack_require__(/*! ./info-extras */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/info-extras.js\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js\");\nconst sig = __webpack_require__(/*! ./sig */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/sig.js\");\n\nconst BASE_URL = \"https://www.youtube.com/watch?v=\";\n\n// Cached for storing basic/full info.\nexports.cache = new Cache();\nexports.watchPageCache = new Cache();\n\n// List of URLs that show up in `notice_url` for age restricted videos.\nconst AGE_RESTRICTED_URLS = [\"support.google.com/youtube/?p=age_restrictions\", \"youtube.com/t/community_guidelines\"];\n\n/**\n * Gets info from a video without getting additional formats.\n *\n * @param {string} id\n * @param {Object} options\n * @returns {Promise<Object>}\n */\nexports.getBasicInfo = async (id, options) => {\n  utils.applyIPv6Rotations(options);\n  utils.applyDefaultHeaders(options);\n  utils.applyDefaultAgent(options);\n  utils.applyOldLocalAddress(options);\n  const retryOptions = Object.assign({}, options.requestOptions);\n  const { jar, dispatcher } = options.agent;\n  utils.setPropInsensitive(\n    options.requestOptions.headers,\n    \"cookie\",\n    jar.getCookieStringSync(\"https://www.youtube.com\"),\n  );\n  options.requestOptions.dispatcher = dispatcher;\n  const info = await retryFunc(getWatchHTMLPage, [id, options], retryOptions);\n\n  const playErr = utils.playError(info.player_response);\n  if (playErr) throw playErr;\n\n  Object.assign(info, {\n    // Replace with formats from iosPlayerResponse\n    // formats: parseFormats(info.player_response),\n    related_videos: extras.getRelatedVideos(info),\n  });\n\n  // Add additional properties to info.\n  const media = extras.getMedia(info);\n  const additional = {\n    author: extras.getAuthor(info),\n    media,\n    likes: extras.getLikes(info),\n    age_restricted: !!(\n      media && AGE_RESTRICTED_URLS.some(url => Object.values(media).some(v => typeof v === \"string\" && v.includes(url)))\n    ),\n\n    // Give the standard link to the video.\n    video_url: BASE_URL + id,\n    storyboards: extras.getStoryboards(info),\n    chapters: extras.getChapters(info),\n  };\n\n  info.videoDetails = extras.cleanVideoDetails(\n    Object.assign(\n      {},\n      info.player_response?.microformat?.playerMicroformatRenderer,\n      info.player_response?.videoDetails,\n      additional,\n    ),\n    info,\n  );\n\n  return info;\n};\n\nconst getWatchHTMLURL = (id, options) =>\n  `${BASE_URL + id}&hl=${options.lang || \"en\"}&bpctr=${Math.ceil(Date.now() / 1000)}&has_verified=1`;\nconst getWatchHTMLPageBody = (id, options) => {\n  const url = getWatchHTMLURL(id, options);\n  return exports.watchPageCache.getOrSet(url, () => utils.request(url, options));\n};\n\nconst EMBED_URL = \"https://www.youtube.com/embed/\";\nconst getEmbedPageBody = (id, options) => {\n  const embedUrl = `${EMBED_URL + id}?hl=${options.lang || \"en\"}`;\n  return utils.request(embedUrl, options);\n};\n\nconst getHTML5player = body => {\n  const html5playerRes =\n    /<script\\s+src=\"([^\"]+)\"(?:\\s+type=\"text\\/javascript\")?\\s+name=\"player_ias\\/base\"\\s*>|\"jsUrl\":\"([^\"]+)\"/.exec(body);\n  return html5playerRes?.[1] || html5playerRes?.[2];\n};\n\n/**\n * Given a function, calls it with `args` until it's successful,\n * or until it encounters an unrecoverable error.\n * Currently, any error from miniget is considered unrecoverable. Errors such as\n * too many redirects, invalid URL, status code 404, status code 502.\n *\n * @param {Function} func\n * @param {Array.<Object>} args\n * @param {Object} options\n * @param {number} options.maxRetries\n * @param {Object} options.backoff\n * @param {number} options.backoff.inc\n */\nconst retryFunc = async (func, args, options) => {\n  let currentTry = 0,\n    result;\n  if (!options.maxRetries) options.maxRetries = 3;\n  if (!options.backoff) options.backoff = { inc: 500, max: 5000 };\n  while (currentTry <= options.maxRetries) {\n    try {\n      result = await func(...args);\n      break;\n    } catch (err) {\n      if (err?.statusCode < 500 || currentTry >= options.maxRetries) throw err;\n      const wait = Math.min(++currentTry * options.backoff.inc, options.backoff.max);\n      await new Promise(resolve => setTimeout(resolve, wait));\n    }\n  }\n  return result;\n};\n\nconst jsonClosingChars = /^[)\\]}'\\s]+/;\nconst parseJSON = (source, varName, json) => {\n  if (!json || typeof json === \"object\") {\n    return json;\n  } else {\n    try {\n      json = json.replace(jsonClosingChars, \"\");\n      return JSON.parse(json);\n    } catch (err) {\n      throw Error(`Error parsing ${varName} in ${source}: ${err.message}`);\n    }\n  }\n};\n\nconst findJSON = (source, varName, body, left, right, prependJSON) => {\n  const jsonStr = utils.between(body, left, right);\n  if (!jsonStr) {\n    throw Error(`Could not find ${varName} in ${source}`);\n  }\n  return parseJSON(source, varName, utils.cutAfterJS(`${prependJSON}${jsonStr}`));\n};\n\nconst findPlayerResponse = (source, info) => {\n  if (!info) return {};\n  const player_response =\n    info.args?.player_response || info.player_response || info.playerResponse || info.embedded_player_response;\n  return parseJSON(source, \"player_response\", player_response);\n};\n\nconst getWatchHTMLPage = async (id, options) => {\n  const body = await getWatchHTMLPageBody(id, options);\n  const info = { page: \"watch\" };\n  try {\n    try {\n      info.player_response =\n        utils.tryParseBetween(body, \"var ytInitialPlayerResponse = \", \"}};\", \"\", \"}}\") ||\n        utils.tryParseBetween(body, \"var ytInitialPlayerResponse = \", \";var\") ||\n        utils.tryParseBetween(body, \"var ytInitialPlayerResponse = \", \";</script>\") ||\n        findJSON(\"watch.html\", \"player_response\", body, /\\bytInitialPlayerResponse\\s*=\\s*\\{/i, \"</script>\", \"{\");\n    } catch (_e) {\n      let args = findJSON(\"watch.html\", \"player_response\", body, /\\bytplayer\\.config\\s*=\\s*{/, \"</script>\", \"{\");\n      info.player_response = findPlayerResponse(\"watch.html\", args);\n    }\n\n    info.response =\n      utils.tryParseBetween(body, \"var ytInitialData = \", \"}};\", \"\", \"}}\") ||\n      utils.tryParseBetween(body, \"var ytInitialData = \", \";</script>\") ||\n      utils.tryParseBetween(body, 'window[\"ytInitialData\"] = ', \"}};\", \"\", \"}}\") ||\n      utils.tryParseBetween(body, 'window[\"ytInitialData\"] = ', \";</script>\") ||\n      findJSON(\"watch.html\", \"response\", body, /\\bytInitialData(\"\\])?\\s*=\\s*\\{/i, \"</script>\", \"{\");\n    info.html5player = getHTML5player(body);\n  } catch (_) {\n    throw Error(\n      \"Error when parsing watch.html, maybe YouTube made a change.\\n\" +\n        `Please report this issue with the \"${utils.saveDebugFile(\n          \"watch.html\",\n          body,\n        )}\" file on https://github.com/distubejs/ytdl-core/issues.`,\n    );\n  }\n  return info;\n};\n\n/**\n * @param {Object} player_response\n * @returns {Array.<Object>}\n */\nconst parseFormats = player_response => {\n  return (player_response?.streamingData?.formats || [])?.concat(player_response?.streamingData?.adaptiveFormats || []);\n};\n\nconst parseAdditionalManifests = (player_response, options) => {\n  const streamingData = player_response?.streamingData,\n    manifests = [];\n  if (streamingData) {\n    if (streamingData.dashManifestUrl) {\n      manifests.push(getDashManifest(streamingData.dashManifestUrl, options));\n    }\n    if (streamingData.hlsManifestUrl) {\n      manifests.push(getM3U8(streamingData.hlsManifestUrl, options));\n    }\n  }\n  return manifests;\n};\n\n// TODO: Clean up this function for readability and support more clients\n/**\n * Gets info from a video additional formats and deciphered URLs.\n *\n * @param {string} id\n * @param {Object} options\n * @returns {Promise<Object>}\n */\nexports.getInfo = async (id, options) => {\n  // Initialize request options\n  utils.applyIPv6Rotations(options);\n  utils.applyDefaultHeaders(options);\n  utils.applyDefaultAgent(options);\n  utils.applyOldLocalAddress(options);\n  utils.applyPlayerClients(options);\n\n  const info = await exports.getBasicInfo(id, options);\n\n  info.html5player =\n    info.html5player ||\n    getHTML5player(await getWatchHTMLPageBody(id, options)) ||\n    getHTML5player(await getEmbedPageBody(id, options));\n\n  if (!info.html5player) {\n    throw Error(\"Unable to find html5player file\");\n  }\n\n  info.html5player = new URL(info.html5player, BASE_URL).toString();\n\n  const formatPromises = [];\n\n  try {\n    const clientPromises = [];\n\n    if (options.playerClients.includes(\"WEB_EMBEDDED\")) clientPromises.push(fetchWebEmbeddedPlayer(id, info, options));\n    if (options.playerClients.includes(\"TV\")) clientPromises.push(fetchTvPlayer(id, info, options));\n    if (options.playerClients.includes(\"IOS\")) clientPromises.push(fetchIosJsonPlayer(id, options));\n    if (options.playerClients.includes(\"ANDROID\")) clientPromises.push(fetchAndroidJsonPlayer(id, options));\n\n    if (clientPromises.length > 0) {\n      const responses = await Promise.allSettled(clientPromises);\n      const successfulResponses = responses\n        .filter(r => r.status === \"fulfilled\")\n        .map(r => r.value)\n        .filter(r => r);\n\n      for (const response of successfulResponses) {\n        const formats = parseFormats(response);\n        if (formats && formats.length > 0) {\n          formatPromises.push(sig.decipherFormats(formats, info.html5player, options));\n        }\n\n        const manifestPromises = parseAdditionalManifests(response, options);\n        formatPromises.push(...manifestPromises);\n      }\n    }\n\n    if (options.playerClients.includes(\"WEB\")) {\n      bestPlayerResponse = info.player_response;\n\n      const formats = parseFormats(info.player_response);\n      if (formats && formats.length > 0) {\n        formatPromises.push(sig.decipherFormats(formats, info.html5player, options));\n      }\n\n      const manifestPromises = parseAdditionalManifests(info.player_response, options);\n      formatPromises.push(...manifestPromises);\n    }\n  } catch (error) {\n    console.error(\"Error fetching formats:\", error);\n\n    const formats = parseFormats(info.player_response);\n    if (formats && formats.length > 0) {\n      formatPromises.push(sig.decipherFormats(formats, info.html5player, options));\n    }\n\n    const manifestPromises = parseAdditionalManifests(info.player_response, options);\n    formatPromises.push(...manifestPromises);\n  }\n\n  if (formatPromises.length === 0) {\n    throw new Error(\"Failed to find any playable formats\");\n  }\n\n  const results = await Promise.all(formatPromises);\n  info.formats = Object.values(Object.assign({}, ...results));\n\n  info.formats = info.formats.filter(format => format && format.url && format.mimeType);\n\n  if (info.formats.length === 0) {\n    throw new Error(\"No playable formats found\");\n  }\n\n  info.formats = info.formats.map(format => {\n    const enhancedFormat = formatUtils.addFormatMeta(format);\n\n    if (!enhancedFormat.audioBitrate && enhancedFormat.hasAudio) {\n      enhancedFormat.audioBitrate = estimateAudioBitrate(enhancedFormat);\n    }\n\n    if (\n      !enhancedFormat.isHLS &&\n      enhancedFormat.mimeType &&\n      (enhancedFormat.mimeType.includes(\"hls\") ||\n        enhancedFormat.mimeType.includes(\"x-mpegURL\") ||\n        enhancedFormat.mimeType.includes(\"application/vnd.apple.mpegurl\"))\n    ) {\n      enhancedFormat.isHLS = true;\n    }\n\n    return enhancedFormat;\n  });\n\n  info.formats.sort(formatUtils.sortFormats);\n\n  const bestFormat =\n    info.formats.find(format => format.hasVideo && format.hasAudio) ||\n    info.formats.find(format => format.hasVideo) ||\n    info.formats.find(format => format.hasAudio) ||\n    info.formats[0];\n\n  info.bestFormat = bestFormat;\n  info.videoUrl = bestFormat.url;\n  info.selectedFormat = bestFormat;\n  info.full = true;\n\n  return info;\n};\n\nconst getPlaybackContext = async (html5player, options) => {\n  const body = await utils.request(html5player, options);\n  const mo = body.match(/(signatureTimestamp|sts):(\\d+)/);\n  return {\n    contentPlaybackContext: {\n      html5Preference: \"HTML5_PREF_WANTS\",\n      signatureTimestamp: mo?.[2],\n    },\n  };\n};\n\nconst getVisitorData = (info, _options) => {\n  for (const respKey of [\"player_response\", \"response\"]) {\n    try {\n      return info[respKey].responseContext.serviceTrackingParams\n          .find(x => x.service === \"GFEEDBACK\").params\n          .find(x => x.key === \"visitor_data\").value;\n    }\n    catch { /* not present */ }\n  }\n  return undefined;\n};\n\nconst LOCALE = { hl: \"en\", timeZone: \"UTC\", utcOffsetMinutes: 0 },\n  CHECK_FLAGS = { contentCheckOk: true, racyCheckOk: true };\n\nconst WEB_EMBEDDED_CONTEXT = {\n  client: {\n    clientName: \"WEB_EMBEDDED_PLAYER\",\n    clientVersion: \"1.20240723.01.00\",\n    ...LOCALE,\n  },\n};\n\nconst TVHTML5_CONTEXT = {\n  client: {\n    clientName: \"TVHTML5\",\n    clientVersion: \"7.20240724.13.00\",\n    ...LOCALE,\n  },\n};\n\nconst fetchWebEmbeddedPlayer = async (videoId, info, options) => {\n  const payload = {\n    context: WEB_EMBEDDED_CONTEXT,\n    videoId,\n    playbackContext: await getPlaybackContext(info.html5player, options),\n    ...CHECK_FLAGS,\n  };\n  return await playerAPI(videoId, payload, options);\n};\nconst fetchTvPlayer = async (videoId, info, options) => {\n  const payload = {\n    context: TVHTML5_CONTEXT,\n    videoId,\n    playbackContext: await getPlaybackContext(info.html5player, options),\n    ...CHECK_FLAGS,\n  };\n\n  options.visitorId = getVisitorData(info, options);\n\n  return await playerAPI(videoId, payload, options);\n};\n\nconst playerAPI = async (videoId, payload, options) => {\n  const { jar, dispatcher } = options.agent;\n  const opts = {\n    requestOptions: {\n      method: \"POST\",\n      dispatcher,\n      query: {\n        prettyPrint: false,\n        t: utils.generateClientPlaybackNonce(12),\n        id: videoId,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Cookie: jar.getCookieStringSync(\"https://www.youtube.com\"),\n        \"X-Goog-Api-Format-Version\": \"2\",\n      },\n      body: JSON.stringify(payload),\n    },\n  };\n  if (options.visitorId) opts.requestOptions.headers[\"X-Goog-Visitor-Id\"] = options.visitorId;\n  const response = await utils.request(\"https://youtubei.googleapis.com/youtubei/v1/player\", opts);\n  const playErr = utils.playError(response);\n  if (playErr) throw playErr;\n  if (!response.videoDetails || videoId !== response.videoDetails.videoId) {\n    const err = new Error(\"Malformed response from YouTube\");\n    err.response = response;\n    throw err;\n  }\n  return response;\n};\n\nconst IOS_CLIENT_VERSION = \"19.45.4\",\n  IOS_DEVICE_MODEL = \"iPhone16,2\",\n  IOS_USER_AGENT_VERSION = \"17_5_1\",\n  IOS_OS_VERSION = \"17.5.1.21F90\";\n\nconst fetchIosJsonPlayer = async (videoId, options) => {\n  const payload = {\n    videoId,\n    cpn: utils.generateClientPlaybackNonce(16),\n    contentCheckOk: true,\n    racyCheckOk: true,\n    context: {\n      client: {\n        clientName: \"IOS\",\n        clientVersion: IOS_CLIENT_VERSION,\n        deviceMake: \"Apple\",\n        deviceModel: IOS_DEVICE_MODEL,\n        platform: \"MOBILE\",\n        osName: \"iOS\",\n        osVersion: IOS_OS_VERSION,\n        hl: \"en\",\n        gl: \"US\",\n        utcOffsetMinutes: -240,\n      },\n      request: {\n        internalExperimentFlags: [],\n        useSsl: true,\n      },\n      user: {\n        lockedSafetyMode: false,\n      },\n    },\n  };\n\n  const { jar, dispatcher } = options.agent;\n  const opts = {\n    requestOptions: {\n      method: \"POST\",\n      dispatcher,\n      query: {\n        prettyPrint: false,\n        t: utils.generateClientPlaybackNonce(12),\n        id: videoId,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        cookie: jar.getCookieStringSync(\"https://www.youtube.com\"),\n        \"User-Agent\": `com.google.ios.youtube/${IOS_CLIENT_VERSION}(${\n          IOS_DEVICE_MODEL\n        }; U; CPU iOS ${IOS_USER_AGENT_VERSION} like Mac OS X; en_US)`,\n        \"X-Goog-Api-Format-Version\": \"2\",\n      },\n      body: JSON.stringify(payload),\n    },\n  };\n  const response = await utils.request(\"https://youtubei.googleapis.com/youtubei/v1/player\", opts);\n  const playErr = utils.playError(response);\n  if (playErr) throw playErr;\n  if (!response.videoDetails || videoId !== response.videoDetails.videoId) {\n    const err = new Error(\"Malformed response from YouTube\");\n    err.response = response;\n    throw err;\n  }\n  return response;\n};\n\nconst ANDROID_CLIENT_VERSION = \"19.44.38\",\n  ANDROID_OS_VERSION = \"11\",\n  ANDROID_SDK_VERSION = \"30\";\n\nconst fetchAndroidJsonPlayer = async (videoId, options) => {\n  const payload = {\n    videoId,\n    cpn: utils.generateClientPlaybackNonce(16),\n    contentCheckOk: true,\n    racyCheckOk: true,\n    context: {\n      client: {\n        clientName: \"ANDROID\",\n        clientVersion: ANDROID_CLIENT_VERSION,\n        platform: \"MOBILE\",\n        osName: \"Android\",\n        osVersion: ANDROID_OS_VERSION,\n        androidSdkVersion: ANDROID_SDK_VERSION,\n        hl: \"en\",\n        gl: \"US\",\n        utcOffsetMinutes: -240,\n      },\n      request: {\n        internalExperimentFlags: [],\n        useSsl: true,\n      },\n      user: {\n        lockedSafetyMode: false,\n      },\n    },\n  };\n\n  const { jar, dispatcher } = options.agent;\n  const opts = {\n    requestOptions: {\n      method: \"POST\",\n      dispatcher,\n      query: {\n        prettyPrint: false,\n        t: utils.generateClientPlaybackNonce(12),\n        id: videoId,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n        cookie: jar.getCookieStringSync(\"https://www.youtube.com\"),\n        \"User-Agent\": `com.google.android.youtube/${\n          ANDROID_CLIENT_VERSION\n        } (Linux; U; Android ${ANDROID_OS_VERSION}) gzip`,\n        \"X-Goog-Api-Format-Version\": \"2\",\n      },\n      body: JSON.stringify(payload),\n    },\n  };\n  const response = await utils.request(\"https://youtubei.googleapis.com/youtubei/v1/player\", opts);\n  const playErr = utils.playError(response);\n  if (playErr) throw playErr;\n  if (!response.videoDetails || videoId !== response.videoDetails.videoId) {\n    const err = new Error(\"Malformed response from YouTube\");\n    err.response = response;\n    throw err;\n  }\n  return response;\n};\n\n/**\n * Gets additional DASH formats.\n *\n * @param {string} url\n * @param {Object} options\n * @returns {Promise<Array.<Object>>}\n */\nconst getDashManifest = (url, options) =>\n  new Promise((resolve, reject) => {\n    const formats = {};\n    const parser = sax.parser(false);\n    parser.onerror = reject;\n    let adaptationSet;\n    parser.onopentag = node => {\n      if (node.name === \"ADAPTATIONSET\") {\n        adaptationSet = node.attributes;\n      } else if (node.name === \"REPRESENTATION\") {\n        const itag = parseInt(node.attributes.ID);\n        if (!isNaN(itag)) {\n          formats[url] = Object.assign(\n            {\n              itag,\n              url,\n              bitrate: parseInt(node.attributes.BANDWIDTH),\n              mimeType: `${adaptationSet.MIMETYPE}; codecs=\"${node.attributes.CODECS}\"`,\n            },\n            node.attributes.HEIGHT\n              ? {\n                  width: parseInt(node.attributes.WIDTH),\n                  height: parseInt(node.attributes.HEIGHT),\n                  fps: parseInt(node.attributes.FRAMERATE),\n                }\n              : {\n                  audioSampleRate: node.attributes.AUDIOSAMPLINGRATE,\n                },\n          );\n        }\n      }\n    };\n    parser.onend = () => {\n      resolve(formats);\n    };\n    utils\n      .request(new URL(url, BASE_URL).toString(), options)\n      .then(res => {\n        parser.write(res);\n        parser.close();\n      })\n      .catch(reject);\n  });\n\n/**\n * Gets additional formats.\n *\n * @param {string} url\n * @param {Object} options\n * @returns {Promise<Array.<Object>>}\n */\nconst getM3U8 = async (url, options) => {\n  url = new URL(url, BASE_URL);\n  const body = await utils.request(url.toString(), options);\n  const formats = {};\n  body\n    .split(\"\\n\")\n    .filter(line => /^https?:\\/\\//.test(line))\n    .forEach(line => {\n      const itag = parseInt(line.match(/\\/itag\\/(\\d+)\\//)[1]);\n      formats[line] = { itag, url: line };\n    });\n  return formats;\n};\n\n// Cache get info functions.\n// In case a user wants to get a video's info before downloading.\nfor (const funcName of [\"getBasicInfo\", \"getInfo\"]) {\n  /**\n   * @param {string} link\n   * @param {Object} options\n   * @returns {Promise<Object>}\n   */\n  const func = exports[funcName];\n  exports[funcName] = async (link, options = {}) => {\n    utils.checkForUpdates();\n    const id = await urlUtils.getVideoID(link);\n    const key = [funcName, id, options.lang].join(\"-\");\n    return exports.cache.getOrSet(key, () => func(id, options));\n  };\n}\n\n// Export a few helpers.\nexports.validateID = urlUtils.validateID;\nexports.validateURL = urlUtils.validateURL;\nexports.getURLVideoID = urlUtils.getURLVideoID;\nexports.getVideoID = urlUtils.getVideoID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/sig.js":
/*!****************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/sig.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/cache.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\");\nconst vm = __webpack_require__(/*! vm */ \"vm\");\n\nexports.cache = new Cache(1);\n\nexports.getFunctions = (html5playerfile, options) =>\n  exports.cache.getOrSet(html5playerfile, async () => {\n    const body = await utils.request(html5playerfile, options);\n    const functions = exports.extractFunctions(body);\n    exports.cache.set(html5playerfile, functions);\n    return functions;\n  });\n\nconst VARIABLE_PART = \"[a-zA-Z_\\\\$][a-zA-Z_0-9\\\\$]*\";\nconst VARIABLE_PART_DEFINE = \"\\\\\\\"?\" + VARIABLE_PART + \"\\\\\\\"?\";\nconst BEFORE_ACCESS = \"(?:\\\\[\\\\\\\"|\\\\.)\";\nconst AFTER_ACCESS = \"(?:\\\\\\\"\\\\]|)\";\nconst VARIABLE_PART_ACCESS = BEFORE_ACCESS + VARIABLE_PART + AFTER_ACCESS;\nconst REVERSE_PART = \":function\\\\(\\\\w\\\\)\\\\{(?:return )?\\\\w\\\\.reverse\\\\(\\\\)\\\\}\";\nconst SLICE_PART = \":function\\\\(\\\\w,\\\\w\\\\)\\\\{return \\\\w\\\\.slice\\\\(\\\\w\\\\)\\\\}\";\nconst SPLICE_PART = \":function\\\\(\\\\w,\\\\w\\\\)\\\\{\\\\w\\\\.splice\\\\(0,\\\\w\\\\)\\\\}\";\nconst SWAP_PART = \":function\\\\(\\\\w,\\\\w\\\\)\\\\{\" +\n  \"var \\\\w=\\\\w\\\\[0\\\\];\\\\w\\\\[0\\\\]=\\\\w\\\\[\\\\w%\\\\w\\\\.length\\\\];\\\\w\\\\[\\\\w(?:%\\\\w.length|)\\\\]=\\\\w(?:;return \\\\w)?\\\\}\";\n\nconst DECIPHER_REGEXP =\n  \"function(?: \" + VARIABLE_PART + \")?\\\\(([a-zA-Z])\\\\)\\\\{\" +\n  \"\\\\1=\\\\1\\\\.split\\\\(\\\"\\\"\\\\);\\\\s*\" +\n  \"((?:(?:\\\\1=)?\" + VARIABLE_PART + VARIABLE_PART_ACCESS + \"\\\\(\\\\1,\\\\d+\\\\);)+)\" +\n  \"return \\\\1\\\\.join\\\\(\\\"\\\"\\\\)\" +\n  \"\\\\}\";\n\nconst HELPER_REGEXP =\n  \"var (\" + VARIABLE_PART + \")=\\\\{((?:(?:\" +\n  VARIABLE_PART_DEFINE + REVERSE_PART + \"|\" +\n  VARIABLE_PART_DEFINE + SLICE_PART + \"|\" +\n  VARIABLE_PART_DEFINE + SPLICE_PART + \"|\" +\n  VARIABLE_PART_DEFINE + SWAP_PART +\n  \"),?\\\\n?)+)\\\\};\";\n\nconst FUNCTION_TCE_REGEXP =\n  \"function(?:\\\\s+[a-zA-Z_\\\\$][a-zA-Z0-9_\\\\$]*)?\\\\(\\\\w\\\\)\\\\{\" +\n  \"\\\\w=\\\\w\\\\.split\\\\((?:\\\"\\\"|[a-zA-Z0-9_$]*\\\\[\\\\d+])\\\\);\" +\n  \"\\\\s*((?:(?:\\\\w=)?[a-zA-Z_\\\\$][a-zA-Z0-9_\\\\$]*(?:\\\\[\\\\\\\"|\\\\.)[a-zA-Z_\\\\$][a-zA-Z0-9_\\\\$]*(?:\\\\\\\"\\\\]|)\\\\(\\\\w,\\\\d+\\\\);)+)\" +\n  \"return \\\\w\\\\.join\\\\((?:\\\"\\\"|[a-zA-Z0-9_$]*\\\\[\\\\d+])\\\\)}\";\n\nconst N_TRANSFORM_REGEXP =\n  \"function\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\" +\n  \"var\\\\s*(\\\\w+)=(?:\\\\1\\\\.split\\\\(.*?\\\\)|String\\\\.prototype\\\\.split\\\\.call\\\\(\\\\1,.*?\\\\)),\" +\n  \"\\\\s*(\\\\w+)=(\\\\[.*?]);\\\\s*\\\\3\\\\[\\\\d+]\" +\n  \"(.*?try)(\\\\{.*?})catch\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\" +\n  '\\\\s*return\"[\\\\w-]+([A-z0-9-]+)\"\\\\s*\\\\+\\\\s*\\\\1\\\\s*}' +\n  '\\\\s*return\\\\s*(\\\\2\\\\.join\\\\(\"\"\\\\)|Array\\\\.prototype\\\\.join\\\\.call\\\\(\\\\2,.*?\\\\))};';\n\nconst N_TRANSFORM_TCE_REGEXP =\n  \"function\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\" +\n  \"\\\\s*var\\\\s*(\\\\w+)=\\\\1\\\\.split\\\\(\\\\1\\\\.slice\\\\(0,0\\\\)\\\\),\\\\s*(\\\\w+)=\\\\[.*?];\" +\n  \".*?catch\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\" +\n  \"\\\\s*return(?:\\\"[^\\\"]+\\\"|\\\\s*[a-zA-Z_0-9$]*\\\\[\\\\d+])\\\\s*\\\\+\\\\s*\\\\1\\\\s*}\" +\n  \"\\\\s*return\\\\s*\\\\2\\\\.join\\\\((?:\\\"\\\"|[a-zA-Z_0-9$]*\\\\[\\\\d+])\\\\)};\";\n\nconst TCE_GLOBAL_VARS_REGEXP =\n  \"(?:^|[;,])\\\\s*(var\\\\s+([\\\\w$]+)\\\\s*=\\\\s*\" +\n  \"(?:\" +\n  \"([\\\"'])(?:\\\\\\\\.|[^\\\\\\\\])*?\\\\3\" +\n  \"\\\\s*\\\\.\\\\s*split\\\\((\" +\n  \"([\\\"'])(?:\\\\\\\\.|[^\\\\\\\\])*?\\\\5\" +\n  \"\\\\))\" +\n  \"|\" +\n  \"\\\\[\\\\s*(?:([\\\"'])(?:\\\\\\\\.|[^\\\\\\\\])*?\\\\6\\\\s*,?\\\\s*)+\\\\]\" +\n  \"))(?=\\\\s*[,;])\";\n\nconst NEW_TCE_GLOBAL_VARS_REGEXP =\n  \"('use\\\\s*strict';)?\" +\n  \"(?<code>var\\\\s*\" +\n  \"(?<varname>[a-zA-Z0-9_$]+)\\\\s*=\\\\s*\" +\n  \"(?<value>\" +\n  \"(?:\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*\\\"|'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*')\" +\n  \"\\\\.split\\\\(\" +\n  \"(?:\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*\\\"|'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*')\" +\n  \"\\\\)\" +\n  \"|\" +\n  \"\\\\[\" +\n  \"(?:(?:\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*\\\"|'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*')\" +\n  \"\\\\s*,?\\\\s*)*\" +\n  \"\\\\]\" +\n  \"|\" +\n  \"\\\"[^\\\"]*\\\"\\\\.split\\\\(\\\"[^\\\"]*\\\"\\\\)\" +\n  \")\" +\n  \")\";\n\nconst TCE_SIGN_FUNCTION_REGEXP = \"function\\\\(\\\\s*([a-zA-Z0-9$])\\\\s*\\\\)\\\\s*\\\\{\" +\n  \"\\\\s*\\\\1\\\\s*=\\\\s*\\\\1\\\\[(\\\\w+)\\\\[\\\\d+\\\\]\\\\]\\\\(\\\\2\\\\[\\\\d+\\\\]\\\\);\" +\n  \"([a-zA-Z0-9$]+)\\\\[\\\\2\\\\[\\\\d+\\\\]\\\\]\\\\(\\\\s*\\\\1\\\\s*,\\\\s*\\\\d+\\\\s*\\\\);\" +\n  \"\\\\s*\\\\3\\\\[\\\\2\\\\[\\\\d+\\\\]\\\\]\\\\(\\\\s*\\\\1\\\\s*,\\\\s*\\\\d+\\\\s*\\\\);\" +\n  \".*?return\\\\s*\\\\1\\\\[\\\\2\\\\[\\\\d+\\\\]\\\\]\\\\(\\\\2\\\\[\\\\d+\\\\]\\\\)\\\\};\";\n\nconst TCE_SIGN_FUNCTION_ACTION_REGEXP = \"var\\\\s+([$A-Za-z0-9_]+)\\\\s*=\\\\s*\\\\{\\\\s*[$A-Za-z0-9_]+\\\\s*:\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^{}]*(?:\\\\{[^{}]*}[^{}]*)*}\\\\s*,\\\\s*[$A-Za-z0-9_]+\\\\s*:\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^{}]*(?:\\\\{[^{}]*}[^{}]*)*}\\\\s*,\\\\s*[$A-Za-z0-9_]+\\\\s*:\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^{}]*(?:\\\\{[^{}]*}[^{}]*)*}\\\\s*};\";\n\nconst TCE_N_FUNCTION_REGEXP = \"function\\\\s*\\\\((\\\\w+)\\\\)\\\\s*\\\\{var\\\\s*\\\\w+\\\\s*=\\\\s*\\\\1\\\\[\\\\w+\\\\[\\\\d+\\\\]\\\\]\\\\(\\\\w+\\\\[\\\\d+\\\\]\\\\)\\\\s*,\\\\s*\\\\w+\\\\s*=\\\\s*\\\\[.*?\\\\]\\\\;.*?catch\\\\s*\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{return\\\\s*\\\\w+\\\\[\\\\d+\\\\]\\\\s*\\\\+\\\\s*\\\\1\\\\}\\\\s*return\\\\s*\\\\w+\\\\[\\\\w+\\\\[\\\\d+\\\\]\\\\]\\\\(\\\\w+\\\\[\\\\d+\\\\]\\\\)\\\\}\\\\s*\\\\;\";\n\nconst PATTERN_PREFIX = \"(?:^|,)\\\\\\\"?(\" + VARIABLE_PART + \")\\\\\\\"?\";\nconst REVERSE_PATTERN = new RegExp(PATTERN_PREFIX + REVERSE_PART, \"m\");\nconst SLICE_PATTERN = new RegExp(PATTERN_PREFIX + SLICE_PART, \"m\");\nconst SPLICE_PATTERN = new RegExp(PATTERN_PREFIX + SPLICE_PART, \"m\");\nconst SWAP_PATTERN = new RegExp(PATTERN_PREFIX + SWAP_PART, \"m\");\n\nconst DECIPHER_ARGUMENT = \"sig\";\nconst N_ARGUMENT = \"ncode\";\nconst DECIPHER_FUNC_NAME = \"DisTubeDecipherFunc\";\nconst N_TRANSFORM_FUNC_NAME = \"DisTubeNTransformFunc\";\n\nconst extractDollarEscapedFirstGroup = (pattern, text) => {\n  const match = text.match(pattern);\n  return match ? match[1].replace(/\\$/g, \"\\\\$\") : null;\n};\n\nconst extractTceFunc = (body) => {\n  try {\n    const tceVariableMatcher = body.match(new RegExp(NEW_TCE_GLOBAL_VARS_REGEXP, 'm'));\n\n    if (!tceVariableMatcher) return;\n\n    const tceVariableMatcherGroups = tceVariableMatcher.groups;\n    if (!tceVariableMatcher.groups) return;\n\n    const code = tceVariableMatcherGroups.code;\n    const varname = tceVariableMatcherGroups.varname;\n\n    return { name: varname, code: code };\n  } catch (e) {\n    console.error(\"Error in extractTceFunc:\", e);\n    return null;\n  }\n}\n\nconst extractDecipherFunc = (body, name, code) => {\n  try {\n    const callerFunc = DECIPHER_FUNC_NAME + \"(\" + DECIPHER_ARGUMENT + \");\";\n    let resultFunc;\n\n    const sigFunctionMatcher = body.match(new RegExp(TCE_SIGN_FUNCTION_REGEXP, 's'));\n    const sigFunctionActionsMatcher = body.match(new RegExp(TCE_SIGN_FUNCTION_ACTION_REGEXP, 's'));\n\n    if (sigFunctionMatcher && sigFunctionActionsMatcher && code) {\n      resultFunc = \"var \" + DECIPHER_FUNC_NAME + \"=\" + sigFunctionMatcher[0] + sigFunctionActionsMatcher[0] + code + \";\\n\";\n      return resultFunc + callerFunc;\n    }\n\n    const helperMatch = body.match(new RegExp(HELPER_REGEXP, \"s\"));\n    if (!helperMatch) return null;\n\n    const helperObject = helperMatch[0];\n    const actionBody = helperMatch[2];\n    const helperName = helperMatch[1];\n\n    const reverseKey = extractDollarEscapedFirstGroup(REVERSE_PATTERN, actionBody);\n    const sliceKey = extractDollarEscapedFirstGroup(SLICE_PATTERN, actionBody);\n    const spliceKey = extractDollarEscapedFirstGroup(SPLICE_PATTERN, actionBody);\n    const swapKey = extractDollarEscapedFirstGroup(SWAP_PATTERN, actionBody);\n\n    const quotedFunctions = [reverseKey, sliceKey, spliceKey, swapKey]\n      .filter(Boolean)\n      .map(key => key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n\n    if (quotedFunctions.length === 0) return null;\n\n    let funcMatch = body.match(new RegExp(DECIPHER_REGEXP, \"s\"));\n    let isTce = false;\n    let decipherFunc;\n\n    if (funcMatch) {\n      decipherFunc = funcMatch[0];\n    } else {\n\n      const tceFuncMatch = body.match(new RegExp(FUNCTION_TCE_REGEXP, \"s\"));\n      if (!tceFuncMatch) return null;\n\n      decipherFunc = tceFuncMatch[0];\n      isTce = true;\n    }\n\n    let tceVars = \"\";\n    if (isTce) {\n      const tceVarsMatch = body.match(new RegExp(TCE_GLOBAL_VARS_REGEXP, \"m\"));\n      if (tceVarsMatch) {\n        tceVars = tceVarsMatch[1] + \";\\n\";\n      }\n    }\n\n    resultFunc = tceVars + helperObject + \"\\nvar \" + DECIPHER_FUNC_NAME + \"=\" + decipherFunc + \";\\n\";\n    return resultFunc + callerFunc;\n  } catch (e) {\n    console.error(\"Error in extractDecipherFunc:\", e);\n    return null;\n  }\n};\n\nconst extractNTransformFunc = (body, name, code) => {\n  try {\n    const callerFunc = N_TRANSFORM_FUNC_NAME + \"(\" + N_ARGUMENT + \");\";\n    let resultFunc;\n    let nFunction;\n\n    const nFunctionMatcher = body.match(new RegExp(TCE_N_FUNCTION_REGEXP, 's'));\n\n    if (nFunctionMatcher && name && code) {\n      nFunction = nFunctionMatcher[0];\n\n      const tceEscapeName = name.replace(\"$\", \"\\\\$\");\n      const shortCircuitPattern = new RegExp(\n        `;\\\\s*if\\\\s*\\\\(\\\\s*typeof\\\\s+[a-zA-Z0-9_$]+\\\\s*===?\\\\s*(?:\\\"undefined\\\"|'undefined'|${tceEscapeName}\\\\[\\\\d+\\\\])\\\\s*\\\\)\\\\s*return\\\\s+\\\\w+;`\n      );\n\n      const tceShortCircuitMatcher = nFunction.match(shortCircuitPattern);\n\n      if (tceShortCircuitMatcher) {\n        nFunction = nFunction.replaceAll(tceShortCircuitMatcher[0], \";\");\n      }\n\n      resultFunc = \"var \" + N_TRANSFORM_FUNC_NAME + \"=\" + nFunction + code + \";\\n\";\n      return resultFunc + callerFunc;\n    }\n\n    let nMatch = body.match(new RegExp(N_TRANSFORM_REGEXP, \"s\"));\n    let isTce = false;\n\n    if (nMatch) {\n      nFunction = nMatch[0];\n    } else {\n\n      const nTceMatch = body.match(new RegExp(N_TRANSFORM_TCE_REGEXP, \"s\"));\n      if (!nTceMatch) return null;\n\n      nFunction = nTceMatch[0];\n      isTce = true;\n    }\n\n    const paramMatch = nFunction.match(/function\\s*\\(\\s*(\\w+)\\s*\\)/);\n    if (!paramMatch) return null;\n\n    const paramName = paramMatch[1];\n\n    const cleanedFunction = nFunction.replace(\n      new RegExp(`if\\\\s*\\\\(typeof\\\\s*[^\\\\s()]+\\\\s*===?.*?\\\\)return ${paramName}\\\\s*;?`, \"g\"),\n      \"\"\n    );\n\n    let tceVars = \"\";\n    if (isTce) {\n      const tceVarsMatch = body.match(new RegExp(TCE_GLOBAL_VARS_REGEXP, \"m\"));\n      if (tceVarsMatch) {\n        tceVars = tceVarsMatch[1] + \";\\n\";\n      }\n    }\n\n    resultFunc = tceVars + \"var \" + N_TRANSFORM_FUNC_NAME + \"=\" + cleanedFunction + \";\\n\";\n    return resultFunc + callerFunc;\n  } catch (e) {\n    console.error(\"Error in extractNTransformFunc:\", e);\n    return null;\n  }\n};\n\nlet decipherWarning = false;\nlet nTransformWarning = false;\n\nconst getExtractFunction = (extractFunctions, body, name, code, postProcess = null) => {\n  for (const extractFunction of extractFunctions) {\n    try {\n      const func = extractFunction(body, name, code);\n      if (!func) continue;\n      return new vm.Script(postProcess ? postProcess(func) : func);\n    } catch (err) {\n      console.error(\"Failed to extract function:\", err);\n      continue;\n    }\n  }\n  return null;\n};\n\nconst extractDecipher = (body, name, code) => {\n  const decipherFunc = getExtractFunction([extractDecipherFunc], body, name, code);\n  if (!decipherFunc && !decipherWarning) {\n    console.warn(\n      \"\\x1b[33mWARNING:\\x1B[0m Could not parse decipher function.\\n\" +\n      \"Stream URLs will be missing.\\n\" +\n      `Please report this issue by uploading the \"${utils.saveDebugFile(\n        \"player-script.js\",\n        body,\n      )}\" file on https://github.com/distubejs/ytdl-core/issues/144.`\n    );\n    decipherWarning = true;\n  }\n  return decipherFunc;\n};\n\nconst extractNTransform = (body, name, code) => {\n  const nTransformFunc = getExtractFunction([extractNTransformFunc], body, name, code);\n\n  if (!nTransformFunc && !nTransformWarning) {\n    console.warn(\n      \"\\x1b[33mWARNING:\\x1B[0m Could not parse n transform function.\\n\" +\n      `Please report this issue by uploading the \"${utils.saveDebugFile(\n        \"player-script.js\",\n        body,\n      )}\" file on https://github.com/distubejs/ytdl-core/issues/144.`\n    );\n    nTransformWarning = true;\n  }\n\n  return nTransformFunc;\n};\n\nexports.extractFunctions = body => {\n  const { name, code } = extractTceFunc(body);\n  return [extractDecipher(body, name, code), extractNTransform(body, name, code)];\n}\n\nexports.setDownloadURL = (format, decipherScript, nTransformScript) => {\n  if (!format) return;\n\n  const decipher = url => {\n    const args = querystring.parse(url);\n    if (!args.s || !decipherScript) return args.url;\n\n    try {\n      const components = new URL(decodeURIComponent(args.url));\n      const context = {};\n      context[DECIPHER_ARGUMENT] = decodeURIComponent(args.s);\n      const decipheredSig = decipherScript.runInNewContext(context);\n\n      components.searchParams.set(args.sp || \"sig\", decipheredSig);\n      return components.toString();\n    } catch (err) {\n      console.error(\"Error applying decipher:\", err);\n      return args.url;\n    }\n  };\n\n  const nTransform = url => {\n    try {\n      const components = new URL(decodeURIComponent(url));\n      const n = components.searchParams.get(\"n\");\n\n      if (!n || !nTransformScript) return url;\n\n      const context = {};\n      context[N_ARGUMENT] = n;\n      const transformedN = nTransformScript.runInNewContext(context);\n\n      if (transformedN) {\n\n        if (n === transformedN) {\n          console.warn(\"Transformed n parameter is the same as input, n function possibly short-circuited\");\n        } else if (transformedN.startsWith(\"enhanced_except_\") || transformedN.endsWith(\"_w8_\" + n)) {\n          console.warn(\"N function did not complete due to exception\");\n        }\n\n        components.searchParams.set(\"n\", transformedN);\n      } else {\n        console.warn(\"Transformed n parameter is null, n function possibly faulty\");\n      }\n\n      return components.toString();\n    } catch (err) {\n      console.error(\"Error applying n transform:\", err);\n      return url;\n    }\n  };\n\n  const cipher = !format.url;\n  const url = format.url || format.signatureCipher || format.cipher;\n\n  if (!url) return;\n\n  try {\n    format.url = nTransform(cipher ? decipher(url) : url);\n\n    delete format.signatureCipher;\n    delete format.cipher;\n  } catch (err) {\n    console.error(\"Error setting download URL:\", err);\n  }\n};\n\nexports.decipherFormats = async (formats, html5player, options) => {\n  try {\n    const decipheredFormats = {};\n    const [decipherScript, nTransformScript] = await exports.getFunctions(html5player, options);\n\n    formats.forEach(format => {\n      exports.setDownloadURL(format, decipherScript, nTransformScript);\n      if (format.url) {\n        decipheredFormats[format.url] = format;\n      }\n    });\n\n    return decipheredFormats;\n  } catch (err) {\n    console.error(\"Error deciphering formats:\", err);\n    return {};\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/sig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/url-utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Get video ID.\n *\n * There are a few type of video URL formats.\n *  - https://www.youtube.com/watch?v=VIDEO_ID\n *  - https://m.youtube.com/watch?v=VIDEO_ID\n *  - https://youtu.be/VIDEO_ID\n *  - https://www.youtube.com/v/VIDEO_ID\n *  - https://www.youtube.com/embed/VIDEO_ID\n *  - https://music.youtube.com/watch?v=VIDEO_ID\n *  - https://gaming.youtube.com/watch?v=VIDEO_ID\n *\n * @param {string} link\n * @return {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\nconst validQueryDomains = new Set([\n  \"youtube.com\",\n  \"www.youtube.com\",\n  \"m.youtube.com\",\n  \"music.youtube.com\",\n  \"gaming.youtube.com\",\n]);\nconst validPathDomains = /^https?:\\/\\/(youtu\\.be\\/|(www\\.)?youtube\\.com\\/(embed|v|shorts|live)\\/)/;\nexports.getURLVideoID = link => {\n  const parsed = new URL(link.trim());\n  let id = parsed.searchParams.get(\"v\");\n  if (validPathDomains.test(link.trim()) && !id) {\n    const paths = parsed.pathname.split(\"/\");\n    id = parsed.host === \"youtu.be\" ? paths[1] : paths[2];\n  } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {\n    throw Error(\"Not a YouTube domain\");\n  }\n  if (!id) {\n    throw Error(`No video id found: \"${link}\"`);\n  }\n  id = id.substring(0, 11);\n  if (!exports.validateID(id)) {\n    throw TypeError(`Video id (${id}) does not match expected ` + `format (${idRegex.toString()})`);\n  }\n  return id;\n};\n\n/**\n * Gets video ID either from a url or by checking if the given string\n * matches the video ID format.\n *\n * @param {string} str\n * @returns {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */\nconst urlRegex = /^https?:\\/\\//;\nexports.getVideoID = str => {\n  if (exports.validateID(str)) {\n    return str;\n  } else if (urlRegex.test(str.trim())) {\n    return exports.getURLVideoID(str);\n  } else {\n    throw Error(`No video id found: ${str}`);\n  }\n};\n\n/**\n * Returns true if given id satifies YouTube's id format.\n *\n * @param {string} id\n * @return {boolean}\n */\nconst idRegex = /^[a-zA-Z0-9-_]{11}$/;\nexports.validateID = id => idRegex.test(id.trim());\n\n/**\n * Checks wether the input string includes a valid id.\n *\n * @param {string} string\n * @returns {boolean}\n */\nexports.validateURL = string => {\n  try {\n    exports.getURLVideoID(string);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi91cmwtdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWixZQUFZLE9BQU87QUFDbkIsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxLQUFLO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxHQUFHLHlDQUF5QyxtQkFBbUI7QUFDaEc7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYixZQUFZLE9BQU87QUFDbkIsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSixzQ0FBc0MsSUFBSTtBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQSxnQ0FBZ0MsR0FBRztBQUNuQyxrQkFBa0I7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3l0LWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL2xpYi91cmwtdXRpbHMuanM/NTJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdldCB2aWRlbyBJRC5cbiAqXG4gKiBUaGVyZSBhcmUgYSBmZXcgdHlwZSBvZiB2aWRlbyBVUkwgZm9ybWF0cy5cbiAqICAtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9VklERU9fSURcbiAqICAtIGh0dHBzOi8vbS55b3V0dWJlLmNvbS93YXRjaD92PVZJREVPX0lEXG4gKiAgLSBodHRwczovL3lvdXR1LmJlL1ZJREVPX0lEXG4gKiAgLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS92L1ZJREVPX0lEXG4gKiAgLSBodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9WSURFT19JRFxuICogIC0gaHR0cHM6Ly9tdXNpYy55b3V0dWJlLmNvbS93YXRjaD92PVZJREVPX0lEXG4gKiAgLSBodHRwczovL2dhbWluZy55b3V0dWJlLmNvbS93YXRjaD92PVZJREVPX0lEXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxpbmtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB1bmFibGUgdG8gZmluZCBhIGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHZpZGVvaWQgZG9lc24ndCBtYXRjaCBzcGVjc1xuICovXG5jb25zdCB2YWxpZFF1ZXJ5RG9tYWlucyA9IG5ldyBTZXQoW1xuICBcInlvdXR1YmUuY29tXCIsXG4gIFwid3d3LnlvdXR1YmUuY29tXCIsXG4gIFwibS55b3V0dWJlLmNvbVwiLFxuICBcIm11c2ljLnlvdXR1YmUuY29tXCIsXG4gIFwiZ2FtaW5nLnlvdXR1YmUuY29tXCIsXG5dKTtcbmNvbnN0IHZhbGlkUGF0aERvbWFpbnMgPSAvXmh0dHBzPzpcXC9cXC8oeW91dHVcXC5iZVxcL3wod3d3XFwuKT95b3V0dWJlXFwuY29tXFwvKGVtYmVkfHZ8c2hvcnRzfGxpdmUpXFwvKS87XG5leHBvcnRzLmdldFVSTFZpZGVvSUQgPSBsaW5rID0+IHtcbiAgY29uc3QgcGFyc2VkID0gbmV3IFVSTChsaW5rLnRyaW0oKSk7XG4gIGxldCBpZCA9IHBhcnNlZC5zZWFyY2hQYXJhbXMuZ2V0KFwidlwiKTtcbiAgaWYgKHZhbGlkUGF0aERvbWFpbnMudGVzdChsaW5rLnRyaW0oKSkgJiYgIWlkKSB7XG4gICAgY29uc3QgcGF0aHMgPSBwYXJzZWQucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgIGlkID0gcGFyc2VkLmhvc3QgPT09IFwieW91dHUuYmVcIiA/IHBhdGhzWzFdIDogcGF0aHNbMl07XG4gIH0gZWxzZSBpZiAocGFyc2VkLmhvc3RuYW1lICYmICF2YWxpZFF1ZXJ5RG9tYWlucy5oYXMocGFyc2VkLmhvc3RuYW1lKSkge1xuICAgIHRocm93IEVycm9yKFwiTm90IGEgWW91VHViZSBkb21haW5cIik7XG4gIH1cbiAgaWYgKCFpZCkge1xuICAgIHRocm93IEVycm9yKGBObyB2aWRlbyBpZCBmb3VuZDogXCIke2xpbmt9XCJgKTtcbiAgfVxuICBpZCA9IGlkLnN1YnN0cmluZygwLCAxMSk7XG4gIGlmICghZXhwb3J0cy52YWxpZGF0ZUlEKGlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcihgVmlkZW8gaWQgKCR7aWR9KSBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBgICsgYGZvcm1hdCAoJHtpZFJlZ2V4LnRvU3RyaW5nKCl9KWApO1xuICB9XG4gIHJldHVybiBpZDtcbn07XG5cbi8qKlxuICogR2V0cyB2aWRlbyBJRCBlaXRoZXIgZnJvbSBhIHVybCBvciBieSBjaGVja2luZyBpZiB0aGUgZ2l2ZW4gc3RyaW5nXG4gKiBtYXRjaGVzIHRoZSB2aWRlbyBJRCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB1bmFibGUgdG8gZmluZCBhIGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHZpZGVvaWQgZG9lc24ndCBtYXRjaCBzcGVjc1xuICovXG5jb25zdCB1cmxSZWdleCA9IC9eaHR0cHM/OlxcL1xcLy87XG5leHBvcnRzLmdldFZpZGVvSUQgPSBzdHIgPT4ge1xuICBpZiAoZXhwb3J0cy52YWxpZGF0ZUlEKHN0cikpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9IGVsc2UgaWYgKHVybFJlZ2V4LnRlc3Qoc3RyLnRyaW0oKSkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5nZXRVUkxWaWRlb0lEKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoYE5vIHZpZGVvIGlkIGZvdW5kOiAke3N0cn1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2l2ZW4gaWQgc2F0aWZpZXMgWW91VHViZSdzIGlkIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlkUmVnZXggPSAvXlthLXpBLVowLTktX117MTF9JC87XG5leHBvcnRzLnZhbGlkYXRlSUQgPSBpZCA9PiBpZFJlZ2V4LnRlc3QoaWQudHJpbSgpKTtcblxuLyoqXG4gKiBDaGVja3Mgd2V0aGVyIHRoZSBpbnB1dCBzdHJpbmcgaW5jbHVkZXMgYSB2YWxpZCBpZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cy52YWxpZGF0ZVVSTCA9IHN0cmluZyA9PiB7XG4gIHRyeSB7XG4gICAgZXhwb3J0cy5nZXRVUkxWaWRlb0lEKHN0cmluZyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/url-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/lib/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const { request } = __webpack_require__(/*! undici */ \"(rsc)/./node_modules/undici/index.js\");\nconst { writeFileSync } = __webpack_require__(/*! fs */ \"fs\");\nconst AGENT = __webpack_require__(/*! ./agent */ \"(rsc)/./node_modules/@distube/ytdl-core/lib/agent.js\");\n\n/**\n * Extract string inbetween another.\n *\n * @param {string} haystack\n * @param {string} left\n * @param {string} right\n * @returns {string}\n */\nconst between = (exports.between = (haystack, left, right) => {\n  let pos;\n  if (left instanceof RegExp) {\n    const match = haystack.match(left);\n    if (!match) {\n      return \"\";\n    }\n    pos = match.index + match[0].length;\n  } else {\n    pos = haystack.indexOf(left);\n    if (pos === -1) {\n      return \"\";\n    }\n    pos += left.length;\n  }\n  haystack = haystack.slice(pos);\n  pos = haystack.indexOf(right);\n  if (pos === -1) {\n    return \"\";\n  }\n  haystack = haystack.slice(0, pos);\n  return haystack;\n});\n\nexports.tryParseBetween = (body, left, right, prepend = \"\", append = \"\") => {\n  try {\n    let data = between(body, left, right);\n    if (!data) return null;\n    return JSON.parse(`${prepend}${data}${append}`);\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Get a number from an abbreviated number string.\n *\n * @param {string} string\n * @returns {number}\n */\nexports.parseAbbreviatedNumber = string => {\n  const match = string\n    .replace(\",\", \".\")\n    .replace(\" \", \"\")\n    .match(/([\\d,.]+)([MK]?)/);\n  if (match) {\n    let [, num, multi] = match;\n    num = parseFloat(num);\n    return Math.round(multi === \"M\" ? num * 1000000 : multi === \"K\" ? num * 1000 : num);\n  }\n  return null;\n};\n\n/**\n * Escape sequences for cutAfterJS\n * @param {string} start the character string the escape sequence\n * @param {string} end the character string to stop the escape seequence\n * @param {undefined|Regex} startPrefix a regex to check against the preceding 10 characters\n */\nconst ESCAPING_SEQUENZES = [\n  // Strings\n  { start: '\"', end: '\"' },\n  { start: \"'\", end: \"'\" },\n  { start: \"`\", end: \"`\" },\n  // RegeEx\n  { start: \"/\", end: \"/\", startPrefix: /(^|[[{:;,/])\\s?$/ },\n];\n\n/**\n * Match begin and end braces of input JS, return only JS\n *\n * @param {string} mixedJson\n * @returns {string}\n */\nexports.cutAfterJS = mixedJson => {\n  // Define the general open and closing tag\n  let open, close;\n  if (mixedJson[0] === \"[\") {\n    open = \"[\";\n    close = \"]\";\n  } else if (mixedJson[0] === \"{\") {\n    open = \"{\";\n    close = \"}\";\n  }\n\n  if (!open) {\n    throw new Error(`Can't cut unsupported JSON (need to begin with [ or { ) but got: ${mixedJson[0]}`);\n  }\n\n  // States if the loop is currently inside an escaped js object\n  let isEscapedObject = null;\n\n  // States if the current character is treated as escaped or not\n  let isEscaped = false;\n\n  // Current open brackets to be closed\n  let counter = 0;\n\n  let i;\n  // Go through all characters from the start\n  for (i = 0; i < mixedJson.length; i++) {\n    // End of current escaped object\n    if (!isEscaped && isEscapedObject !== null && mixedJson[i] === isEscapedObject.end) {\n      isEscapedObject = null;\n      continue;\n      // Might be the start of a new escaped object\n    } else if (!isEscaped && isEscapedObject === null) {\n      for (const escaped of ESCAPING_SEQUENZES) {\n        if (mixedJson[i] !== escaped.start) continue;\n        // Test startPrefix against last 10 characters\n        if (!escaped.startPrefix || mixedJson.substring(i - 10, i).match(escaped.startPrefix)) {\n          isEscapedObject = escaped;\n          break;\n        }\n      }\n      // Continue if we found a new escaped object\n      if (isEscapedObject !== null) {\n        continue;\n      }\n    }\n\n    // Toggle the isEscaped boolean for every backslash\n    // Reset for every regular character\n    isEscaped = mixedJson[i] === \"\\\\\" && !isEscaped;\n\n    if (isEscapedObject !== null) continue;\n\n    if (mixedJson[i] === open) {\n      counter++;\n    } else if (mixedJson[i] === close) {\n      counter--;\n    }\n\n    // All brackets have been closed, thus end of JSON is reached\n    if (counter === 0) {\n      // Return the cut JSON\n      return mixedJson.substring(0, i + 1);\n    }\n  }\n\n  // We ran through the whole string and ended up with an unclosed bracket\n  throw Error(\"Can't cut unsupported JSON (no matching closing bracket found)\");\n};\n\nclass UnrecoverableError extends Error {}\n/**\n * Checks if there is a playability error.\n *\n * @param {Object} player_response\n * @returns {!Error}\n */\nexports.playError = player_response => {\n  const playability = player_response?.playabilityStatus;\n  if (!playability) return null;\n  if ([\"ERROR\", \"LOGIN_REQUIRED\"].includes(playability.status)) {\n    return new UnrecoverableError(playability.reason || playability.messages?.[0]);\n  }\n  if (playability.status === \"LIVE_STREAM_OFFLINE\") {\n    return new UnrecoverableError(playability.reason || \"The live stream is offline.\");\n  }\n  if (playability.status === \"UNPLAYABLE\") {\n    return new UnrecoverableError(playability.reason || \"This video is unavailable.\");\n  }\n  return null;\n};\n\n// Undici request\nconst useFetch = async (fetch, url, requestOptions) => {\n  // embed query to url\n  const query = requestOptions.query;\n  if (query) {\n    const urlObject = new URL(url);\n    for (const key in query) {\n      urlObject.searchParams.append(key, query[key]);\n    }\n    url = urlObject.toString();\n  }\n\n  const response = await fetch(url, requestOptions);\n\n  // convert webstandard response to undici request's response\n  const statusCode = response.status;\n  const body = Object.assign(response, response.body || {});\n  const headers = Object.fromEntries(response.headers.entries());\n\n  return { body, statusCode, headers };\n};\nexports.request = async (url, options = {}) => {\n  let { requestOptions, rewriteRequest, fetch } = options;\n\n  if (typeof rewriteRequest === \"function\") {\n    const rewritten = rewriteRequest(url, requestOptions);\n    requestOptions = rewritten.requestOptions || requestOptions;\n    url = rewritten.url || url;\n  }\n\n  const req =\n    typeof fetch === \"function\" ? await useFetch(fetch, url, requestOptions) : await request(url, requestOptions);\n  const code = req.statusCode.toString();\n\n  if (code.startsWith(\"2\")) {\n    if (req.headers[\"content-type\"].includes(\"application/json\")) return req.body.json();\n    return req.body.text();\n  }\n  if (code.startsWith(\"3\")) return exports.request(req.headers.location, options);\n\n  const e = new Error(`Status code: ${code}`);\n  e.statusCode = req.statusCode;\n  throw e;\n};\n\n/**\n * Temporary helper to help deprecating a few properties.\n *\n * @param {Object} obj\n * @param {string} prop\n * @param {Object} value\n * @param {string} oldPath\n * @param {string} newPath\n */\nexports.deprecate = (obj, prop, value, oldPath, newPath) => {\n  Object.defineProperty(obj, prop, {\n    get: () => {\n      console.warn(`\\`${oldPath}\\` will be removed in a near future release, ` + `use \\`${newPath}\\` instead.`);\n      return value;\n    },\n  });\n};\n\n// Check for updates.\nconst pkg = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/@distube/ytdl-core/package.json\");\nconst UPDATE_INTERVAL = 1000 * 60 * 60 * 12;\nlet updateWarnTimes = 0;\nexports.lastUpdateCheck = 0;\nexports.checkForUpdates = () => {\n  if (\n    !process.env.YTDL_NO_UPDATE &&\n    !pkg.version.startsWith(\"0.0.0-\") &&\n    Date.now() - exports.lastUpdateCheck >= UPDATE_INTERVAL\n  ) {\n    exports.lastUpdateCheck = Date.now();\n    return exports\n      .request(\"https://api.github.com/repos/distubejs/ytdl-core/contents/package.json\", {\n        requestOptions: {\n          headers: {\n            \"User-Agent\":\n              \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.3\",\n          },\n        },\n      })\n      .then(\n        response => {\n          const buf = Buffer.from(response.content, response.encoding);\n          const pkgFile = JSON.parse(buf.toString(\"ascii\"));\n          if (pkgFile.version !== pkg.version && updateWarnTimes++ < 5) {\n            // eslint-disable-next-line max-len\n            console.warn(\n              '\\x1b[33mWARNING:\\x1B[0m @distube/ytdl-core is out of date! Update with \"npm install @distube/ytdl-core@latest\".',\n            );\n          }\n        },\n        err => {\n          console.warn(\"Error checking for updates:\", err.message);\n          console.warn(\"You can disable this check by setting the `YTDL_NO_UPDATE` env variable.\");\n        },\n      );\n  }\n  return null;\n};\n\n/**\n * Gets random IPv6 Address from a block\n *\n * @param {string} ip the IPv6 block in CIDR-Notation\n * @returns {string}\n */\nconst getRandomIPv6 = ip => {\n  if (!isIPv6(ip)) {\n    throw new Error(\"Invalid IPv6 format\");\n  }\n\n  const [rawAddr, rawMask] = ip.split(\"/\");\n  const mask = parseInt(rawMask, 10);\n\n  if (isNaN(mask) || mask > 128 || mask < 1) {\n    throw new Error(\"Invalid IPv6 subnet mask (must be between 1 and 128)\");\n  }\n\n  const base10addr = normalizeIP(rawAddr);\n\n  const fullMaskGroups = Math.floor(mask / 16);\n  const remainingBits = mask % 16;\n\n  const result = new Array(8).fill(0);\n\n  for (let i = 0; i < 8; i++) {\n    if (i < fullMaskGroups) {\n      result[i] = base10addr[i];\n    } else if (i === fullMaskGroups && remainingBits > 0) {\n      const groupMask = 0xffff << (16 - remainingBits);\n      const randomPart = Math.floor(Math.random() * (1 << (16 - remainingBits)));\n      result[i] = (base10addr[i] & groupMask) | randomPart;\n    } else {\n      result[i] = Math.floor(Math.random() * 0x10000);\n    }\n  }\n\n  return result.map(x => x.toString(16).padStart(4, \"0\")).join(\":\");\n};\n\nconst isIPv6 = ip => {\n  const IPV6_REGEX =\n    /^(?:(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(?:\\/(?:1[0-1][0-9]|12[0-8]|[1-9][0-9]|[1-9]))?$/;\n  return IPV6_REGEX.test(ip);\n};\n\n/**\n * Normalizes an IPv6 address into an array of 8 integers\n * @param {string} ip - IPv6 address\n * @returns {number[]} - Array of 8 integers representing the address\n */\nconst normalizeIP = ip => {\n  const parts = ip.split(\"::\");\n  let start = parts[0] ? parts[0].split(\":\") : [];\n  let end = parts[1] ? parts[1].split(\":\") : [];\n\n  const missing = 8 - (start.length + end.length);\n  const zeros = new Array(missing).fill(\"0\");\n\n  const full = [...start, ...zeros, ...end];\n\n  return full.map(part => parseInt(part || \"0\", 16));\n};\n\nexports.saveDebugFile = (name, body) => {\n  if (process.env.YTDL_NO_DEBUG_FILE) {\n    console.warn(`\\x1b[33mWARNING:\\x1b[0m Debug file saving is disabled. \"${name}\"`);\n    return body;\n  }\n  const filename = `${+new Date()}-${name}`;\n  const debugPath = process.env.YTDL_DEBUG_PATH || '.';\n  writeFileSync(`${debugPath}/${filename}`, body);\n  return filename;\n};\n\nconst findPropKeyInsensitive = (obj, prop) =>\n  Object.keys(obj).find(p => p.toLowerCase() === prop.toLowerCase()) || null;\n\nexports.getPropInsensitive = (obj, prop) => {\n  const key = findPropKeyInsensitive(obj, prop);\n  return key && obj[key];\n};\n\nexports.setPropInsensitive = (obj, prop, value) => {\n  const key = findPropKeyInsensitive(obj, prop);\n  obj[key || prop] = value;\n  return key;\n};\n\nlet oldCookieWarning = true;\nlet oldDispatcherWarning = true;\nexports.applyDefaultAgent = options => {\n  if (!options.agent) {\n    const { jar } = AGENT.defaultAgent;\n    const c = exports.getPropInsensitive(options.requestOptions.headers, \"cookie\");\n    if (c) {\n      jar.removeAllCookiesSync();\n      AGENT.addCookiesFromString(jar, c);\n      if (oldCookieWarning) {\n        oldCookieWarning = false;\n        console.warn(\n          \"\\x1b[33mWARNING:\\x1B[0m Using old cookie format, \" +\n            \"please use the new one instead. (https://github.com/distubejs/ytdl-core#cookies-support)\",\n        );\n      }\n    }\n    if (options.requestOptions.dispatcher && oldDispatcherWarning) {\n      oldDispatcherWarning = false;\n      console.warn(\n        \"\\x1b[33mWARNING:\\x1B[0m Your dispatcher is overridden by `ytdl.Agent`. \" +\n          \"To implement your own, check out the documentation. \" +\n          \"(https://github.com/distubejs/ytdl-core#how-to-implement-ytdlagent-with-your-own-dispatcher)\",\n      );\n    }\n    options.agent = AGENT.defaultAgent;\n  }\n};\n\nlet oldLocalAddressWarning = true;\nexports.applyOldLocalAddress = options => {\n  if (!options?.requestOptions?.localAddress || options.requestOptions.localAddress === options.agent.localAddress)\n    return;\n  options.agent = AGENT.createAgent(undefined, { localAddress: options.requestOptions.localAddress });\n  if (oldLocalAddressWarning) {\n    oldLocalAddressWarning = false;\n    console.warn(\n      \"\\x1b[33mWARNING:\\x1B[0m Using old localAddress option, \" +\n        \"please add it to the agent options instead. (https://github.com/distubejs/ytdl-core#ip-rotation)\",\n    );\n  }\n};\n\nlet oldIpRotationsWarning = true;\nexports.applyIPv6Rotations = options => {\n  if (options.IPv6Block) {\n    options.requestOptions = Object.assign({}, options.requestOptions, {\n      localAddress: getRandomIPv6(options.IPv6Block),\n    });\n    if (oldIpRotationsWarning) {\n      oldIpRotationsWarning = false;\n      oldLocalAddressWarning = false;\n      console.warn(\n        \"\\x1b[33mWARNING:\\x1B[0m IPv6Block option is deprecated, \" +\n          \"please create your own ip rotation instead. (https://github.com/distubejs/ytdl-core#ip-rotation)\",\n      );\n    }\n  }\n};\n\nexports.applyDefaultHeaders = options => {\n  options.requestOptions = Object.assign({}, options.requestOptions);\n  options.requestOptions.headers = Object.assign(\n    {},\n    {\n      // eslint-disable-next-line max-len\n      \"User-Agent\":\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.101 Safari/537.36\",\n    },\n    options.requestOptions.headers,\n  );\n};\n\nexports.generateClientPlaybackNonce = length => {\n  const CPN_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n  return Array.from({ length }, () => CPN_CHARS[Math.floor(Math.random() * CPN_CHARS.length)]).join(\"\");\n};\n\nexports.applyPlayerClients = options => {\n  if (!options.playerClients || options.playerClients.length === 0) {\n    options.playerClients = [\"WEB_EMBEDDED\", \"IOS\", \"ANDROID\", \"TV\"];\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/helpers.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/helpers.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.req = exports.json = exports.toBuffer = void 0;\nconst http = __importStar(__webpack_require__(/*! http */ \"http\"));\nconst https = __importStar(__webpack_require__(/*! https */ \"https\"));\nasync function toBuffer(stream) {\n    let length = 0;\n    const chunks = [];\n    for await (const chunk of stream) {\n        length += chunk.length;\n        chunks.push(chunk);\n    }\n    return Buffer.concat(chunks, length);\n}\nexports.toBuffer = toBuffer;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function json(stream) {\n    const buf = await toBuffer(stream);\n    const str = buf.toString('utf8');\n    try {\n        return JSON.parse(str);\n    }\n    catch (_err) {\n        const err = _err;\n        err.message += ` (input: ${str})`;\n        throw err;\n    }\n}\nexports.json = json;\nfunction req(url, opts = {}) {\n    const href = typeof url === 'string' ? url : url.href;\n    const req = (href.startsWith('https:') ? https : http).request(url, opts);\n    const promise = new Promise((resolve, reject) => {\n        req\n            .once('response', resolve)\n            .once('error', reject)\n            .end();\n    });\n    req.then = promise.then.bind(promise);\n    return req;\n}\nexports.req = req;\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL25vZGVfbW9kdWxlcy9hZ2VudC1iYXNlL2Rpc3QvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVyxHQUFHLFlBQVksR0FBRyxnQkFBZ0I7QUFDN0MsMEJBQTBCLG1CQUFPLENBQUMsa0JBQU07QUFDeEMsMkJBQTJCLG1CQUFPLENBQUMsb0JBQU87QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veXQtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9AZGlzdHViZS95dGRsLWNvcmUvbm9kZV9tb2R1bGVzL2FnZW50LWJhc2UvZGlzdC9oZWxwZXJzLmpzPzMzZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVxID0gZXhwb3J0cy5qc29uID0gZXhwb3J0cy50b0J1ZmZlciA9IHZvaWQgMDtcbmNvbnN0IGh0dHAgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImh0dHBcIikpO1xuY29uc3QgaHR0cHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImh0dHBzXCIpKTtcbmFzeW5jIGZ1bmN0aW9uIHRvQnVmZmVyKHN0cmVhbSkge1xuICAgIGxldCBsZW5ndGggPSAwO1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgIGxlbmd0aCArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgIGNodW5rcy5wdXNoKGNodW5rKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoY2h1bmtzLCBsZW5ndGgpO1xufVxuZXhwb3J0cy50b0J1ZmZlciA9IHRvQnVmZmVyO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmFzeW5jIGZ1bmN0aW9uIGpzb24oc3RyZWFtKSB7XG4gICAgY29uc3QgYnVmID0gYXdhaXQgdG9CdWZmZXIoc3RyZWFtKTtcbiAgICBjb25zdCBzdHIgPSBidWYudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICAgIH1cbiAgICBjYXRjaCAoX2Vycikge1xuICAgICAgICBjb25zdCBlcnIgPSBfZXJyO1xuICAgICAgICBlcnIubWVzc2FnZSArPSBgIChpbnB1dDogJHtzdHJ9KWA7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG59XG5leHBvcnRzLmpzb24gPSBqc29uO1xuZnVuY3Rpb24gcmVxKHVybCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgaHJlZiA9IHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnID8gdXJsIDogdXJsLmhyZWY7XG4gICAgY29uc3QgcmVxID0gKGhyZWYuc3RhcnRzV2l0aCgnaHR0cHM6JykgPyBodHRwcyA6IGh0dHApLnJlcXVlc3QodXJsLCBvcHRzKTtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXFcbiAgICAgICAgICAgIC5vbmNlKCdyZXNwb25zZScsIHJlc29sdmUpXG4gICAgICAgICAgICAub25jZSgnZXJyb3InLCByZWplY3QpXG4gICAgICAgICAgICAuZW5kKCk7XG4gICAgfSk7XG4gICAgcmVxLnRoZW4gPSBwcm9taXNlLnRoZW4uYmluZChwcm9taXNlKTtcbiAgICByZXR1cm4gcmVxO1xufVxuZXhwb3J0cy5yZXEgPSByZXE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Agent = void 0;\nconst net = __importStar(__webpack_require__(/*! net */ \"net\"));\nconst http = __importStar(__webpack_require__(/*! http */ \"http\"));\nconst https_1 = __webpack_require__(/*! https */ \"https\");\n__exportStar(__webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/helpers.js\"), exports);\nconst INTERNAL = Symbol('AgentBaseInternalState');\nclass Agent extends http.Agent {\n    constructor(opts) {\n        super(opts);\n        this[INTERNAL] = {};\n    }\n    /**\n     * Determine whether this is an `http` or `https` request.\n     */\n    isSecureEndpoint(options) {\n        if (options) {\n            // First check the `secureEndpoint` property explicitly, since this\n            // means that a parent `Agent` is \"passing through\" to this instance.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof options.secureEndpoint === 'boolean') {\n                return options.secureEndpoint;\n            }\n            // If no explicit `secure` endpoint, check if `protocol` property is\n            // set. This will usually be the case since using a full string URL\n            // or `URL` instance should be the most common usage.\n            if (typeof options.protocol === 'string') {\n                return options.protocol === 'https:';\n            }\n        }\n        // Finally, if no `protocol` property was set, then fall back to\n        // checking the stack trace of the current call stack, and try to\n        // detect the \"https\" module.\n        const { stack } = new Error();\n        if (typeof stack !== 'string')\n            return false;\n        return stack\n            .split('\\n')\n            .some((l) => l.indexOf('(https.js:') !== -1 ||\n            l.indexOf('node:https:') !== -1);\n    }\n    // In order to support async signatures in `connect()` and Node's native\n    // connection pooling in `http.Agent`, the array of sockets for each origin\n    // has to be updated synchronously. This is so the length of the array is\n    // accurate when `addRequest()` is next called. We achieve this by creating a\n    // fake socket and adding it to `sockets[origin]` and incrementing\n    // `totalSocketCount`.\n    incrementSockets(name) {\n        // If `maxSockets` and `maxTotalSockets` are both Infinity then there is no\n        // need to create a fake socket because Node.js native connection pooling\n        // will never be invoked.\n        if (this.maxSockets === Infinity && this.maxTotalSockets === Infinity) {\n            return null;\n        }\n        // All instances of `sockets` are expected TypeScript errors. The\n        // alternative is to add it as a private property of this class but that\n        // will break TypeScript subclassing.\n        if (!this.sockets[name]) {\n            // @ts-expect-error `sockets` is readonly in `@types/node`\n            this.sockets[name] = [];\n        }\n        const fakeSocket = new net.Socket({ writable: false });\n        this.sockets[name].push(fakeSocket);\n        // @ts-expect-error `totalSocketCount` isn't defined in `@types/node`\n        this.totalSocketCount++;\n        return fakeSocket;\n    }\n    decrementSockets(name, socket) {\n        if (!this.sockets[name] || socket === null) {\n            return;\n        }\n        const sockets = this.sockets[name];\n        const index = sockets.indexOf(socket);\n        if (index !== -1) {\n            sockets.splice(index, 1);\n            // @ts-expect-error  `totalSocketCount` isn't defined in `@types/node`\n            this.totalSocketCount--;\n            if (sockets.length === 0) {\n                // @ts-expect-error `sockets` is readonly in `@types/node`\n                delete this.sockets[name];\n            }\n        }\n    }\n    // In order to properly update the socket pool, we need to call `getName()` on\n    // the core `https.Agent` if it is a secureEndpoint.\n    getName(options) {\n        const secureEndpoint = this.isSecureEndpoint(options);\n        if (secureEndpoint) {\n            // @ts-expect-error `getName()` isn't defined in `@types/node`\n            return https_1.Agent.prototype.getName.call(this, options);\n        }\n        // @ts-expect-error `getName()` isn't defined in `@types/node`\n        return super.getName(options);\n    }\n    createSocket(req, options, cb) {\n        const connectOpts = {\n            ...options,\n            secureEndpoint: this.isSecureEndpoint(options),\n        };\n        const name = this.getName(connectOpts);\n        const fakeSocket = this.incrementSockets(name);\n        Promise.resolve()\n            .then(() => this.connect(req, connectOpts))\n            .then((socket) => {\n            this.decrementSockets(name, fakeSocket);\n            if (socket instanceof http.Agent) {\n                try {\n                    // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n                    return socket.addRequest(req, connectOpts);\n                }\n                catch (err) {\n                    return cb(err);\n                }\n            }\n            this[INTERNAL].currentSocket = socket;\n            // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n            super.createSocket(req, options, cb);\n        }, (err) => {\n            this.decrementSockets(name, fakeSocket);\n            cb(err);\n        });\n    }\n    createConnection() {\n        const socket = this[INTERNAL].currentSocket;\n        this[INTERNAL].currentSocket = undefined;\n        if (!socket) {\n            throw new Error('No socket was returned in the `connect()` function');\n        }\n        return socket;\n    }\n    get defaultPort() {\n        return (this[INTERNAL].defaultPort ??\n            (this.protocol === 'https:' ? 443 : 80));\n    }\n    set defaultPort(v) {\n        if (this[INTERNAL]) {\n            this[INTERNAL].defaultPort = v;\n        }\n    }\n    get protocol() {\n        return (this[INTERNAL].protocol ??\n            (this.isSecureEndpoint() ? 'https:' : 'http:'));\n    }\n    set protocol(v) {\n        if (this[INTERNAL]) {\n            this[INTERNAL].protocol = v;\n        }\n    }\n}\nexports.Agent = Agent;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/index.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpsProxyAgent = void 0;\nconst net = __importStar(__webpack_require__(/*! net */ \"net\"));\nconst tls = __importStar(__webpack_require__(/*! tls */ \"tls\"));\nconst assert_1 = __importDefault(__webpack_require__(/*! assert */ \"assert\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst agent_base_1 = __webpack_require__(/*! agent-base */ \"(rsc)/./node_modules/@distube/ytdl-core/node_modules/agent-base/dist/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst parse_proxy_response_1 = __webpack_require__(/*! ./parse-proxy-response */ \"(rsc)/./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/parse-proxy-response.js\");\nconst debug = (0, debug_1.default)('https-proxy-agent');\nconst setServernameFromNonIpHost = (options) => {\n    if (options.servername === undefined &&\n        options.host &&\n        !net.isIP(options.host)) {\n        return {\n            ...options,\n            servername: options.host,\n        };\n    }\n    return options;\n};\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n    constructor(proxy, opts) {\n        super(opts);\n        this.options = { path: undefined };\n        this.proxy = typeof proxy === 'string' ? new url_1.URL(proxy) : proxy;\n        this.proxyHeaders = opts?.headers ?? {};\n        debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n        // Trim off the brackets from IPv6 addresses\n        const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n        const port = this.proxy.port\n            ? parseInt(this.proxy.port, 10)\n            : this.proxy.protocol === 'https:'\n                ? 443\n                : 80;\n        this.connectOpts = {\n            // Attempt to negotiate http/1.1 for proxy servers that support http/2\n            ALPNProtocols: ['http/1.1'],\n            ...(opts ? omit(opts, 'headers') : null),\n            host,\n            port,\n        };\n    }\n    /**\n     * Called when the node-core HTTP client library is creating a\n     * new HTTP request.\n     */\n    async connect(req, opts) {\n        const { proxy } = this;\n        if (!opts.host) {\n            throw new TypeError('No \"host\" provided');\n        }\n        // Create a socket connection to the proxy server.\n        let socket;\n        if (proxy.protocol === 'https:') {\n            debug('Creating `tls.Socket`: %o', this.connectOpts);\n            socket = tls.connect(setServernameFromNonIpHost(this.connectOpts));\n        }\n        else {\n            debug('Creating `net.Socket`: %o', this.connectOpts);\n            socket = net.connect(this.connectOpts);\n        }\n        const headers = typeof this.proxyHeaders === 'function'\n            ? this.proxyHeaders()\n            : { ...this.proxyHeaders };\n        const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n        let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n        // Inject the `Proxy-Authorization` header if necessary.\n        if (proxy.username || proxy.password) {\n            const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n            headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n        }\n        headers.Host = `${host}:${opts.port}`;\n        if (!headers['Proxy-Connection']) {\n            headers['Proxy-Connection'] = this.keepAlive\n                ? 'Keep-Alive'\n                : 'close';\n        }\n        for (const name of Object.keys(headers)) {\n            payload += `${name}: ${headers[name]}\\r\\n`;\n        }\n        const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);\n        socket.write(`${payload}\\r\\n`);\n        const { connect, buffered } = await proxyResponsePromise;\n        req.emit('proxyConnect', connect);\n        this.emit('proxyConnect', connect, req);\n        if (connect.statusCode === 200) {\n            req.once('socket', resume);\n            if (opts.secureEndpoint) {\n                // The proxy is connecting to a TLS server, so upgrade\n                // this socket connection to a TLS connection.\n                debug('Upgrading socket connection to TLS');\n                return tls.connect({\n                    ...omit(setServernameFromNonIpHost(opts), 'host', 'path', 'port'),\n                    socket,\n                });\n            }\n            return socket;\n        }\n        // Some other status code that's not 200... need to re-play the HTTP\n        // header \"data\" events onto the socket once the HTTP machinery is\n        // attached so that the node core `http` can parse and handle the\n        // error status code.\n        // Close the original socket, and a new \"fake\" socket is returned\n        // instead, so that the proxy doesn't get the HTTP request\n        // written to it (which may contain `Authorization` headers or other\n        // sensitive data).\n        //\n        // See: https://hackerone.com/reports/541502\n        socket.destroy();\n        const fakeSocket = new net.Socket({ writable: false });\n        fakeSocket.readable = true;\n        // Need to wait for the \"socket\" event to re-play the \"data\" events.\n        req.once('socket', (s) => {\n            debug('Replaying proxy buffer for failed request');\n            (0, assert_1.default)(s.listenerCount('data') > 0);\n            // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n            // this point the HTTP module machinery has been hooked up for\n            // the user.\n            s.push(buffered);\n            s.push(null);\n        });\n        return fakeSocket;\n    }\n}\nHttpsProxyAgent.protocols = ['http', 'https'];\nexports.HttpsProxyAgent = HttpsProxyAgent;\nfunction resume(socket) {\n    socket.resume();\n}\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/parse-proxy-response.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/parse-proxy-response.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseProxyResponse = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('https-proxy-agent:parse-proxy-response');\nfunction parseProxyResponse(socket) {\n    return new Promise((resolve, reject) => {\n        // we need to buffer any HTTP traffic that happens with the proxy before we get\n        // the CONNECT response, so that if the response is anything other than an \"200\"\n        // response code, then we can re-play the \"data\" events on the socket once the\n        // HTTP parser is hooked up...\n        let buffersLength = 0;\n        const buffers = [];\n        function read() {\n            const b = socket.read();\n            if (b)\n                ondata(b);\n            else\n                socket.once('readable', read);\n        }\n        function cleanup() {\n            socket.removeListener('end', onend);\n            socket.removeListener('error', onerror);\n            socket.removeListener('readable', read);\n        }\n        function onend() {\n            cleanup();\n            debug('onend');\n            reject(new Error('Proxy connection ended before receiving CONNECT response'));\n        }\n        function onerror(err) {\n            cleanup();\n            debug('onerror %o', err);\n            reject(err);\n        }\n        function ondata(b) {\n            buffers.push(b);\n            buffersLength += b.length;\n            const buffered = Buffer.concat(buffers, buffersLength);\n            const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n            if (endOfHeaders === -1) {\n                // keep buffering\n                debug('have not received end of HTTP headers yet...');\n                read();\n                return;\n            }\n            const headerParts = buffered\n                .slice(0, endOfHeaders)\n                .toString('ascii')\n                .split('\\r\\n');\n            const firstLine = headerParts.shift();\n            if (!firstLine) {\n                socket.destroy();\n                return reject(new Error('No header received from proxy CONNECT response'));\n            }\n            const firstLineParts = firstLine.split(' ');\n            const statusCode = +firstLineParts[1];\n            const statusText = firstLineParts.slice(2).join(' ');\n            const headers = {};\n            for (const header of headerParts) {\n                if (!header)\n                    continue;\n                const firstColon = header.indexOf(':');\n                if (firstColon === -1) {\n                    socket.destroy();\n                    return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n                }\n                const key = header.slice(0, firstColon).toLowerCase();\n                const value = header.slice(firstColon + 1).trimStart();\n                const current = headers[key];\n                if (typeof current === 'string') {\n                    headers[key] = [current, value];\n                }\n                else if (Array.isArray(current)) {\n                    current.push(value);\n                }\n                else {\n                    headers[key] = value;\n                }\n            }\n            debug('got proxy server response: %o %o', firstLine, headers);\n            cleanup();\n            resolve({\n                connect: {\n                    statusCode,\n                    statusText,\n                    headers,\n                },\n                buffered,\n            });\n        }\n        socket.on('error', onerror);\n        socket.on('end', onend);\n        read();\n    });\n}\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRpc3R1YmUveXRkbC1jb3JlL25vZGVfbW9kdWxlcy9odHRwcy1wcm94eS1hZ2VudC9kaXN0L3BhcnNlLXByb3h5LXJlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEZBQTRGLE9BQU87QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veXQtZG93bmxvYWRlci8uL25vZGVfbW9kdWxlcy9AZGlzdHViZS95dGRsLWNvcmUvbm9kZV9tb2R1bGVzL2h0dHBzLXByb3h5LWFnZW50L2Rpc3QvcGFyc2UtcHJveHktcmVzcG9uc2UuanM/YzFlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VQcm94eVJlc3BvbnNlID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnaHR0cHMtcHJveHktYWdlbnQ6cGFyc2UtcHJveHktcmVzcG9uc2UnKTtcbmZ1bmN0aW9uIHBhcnNlUHJveHlSZXNwb25zZShzb2NrZXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIGJ1ZmZlciBhbnkgSFRUUCB0cmFmZmljIHRoYXQgaGFwcGVucyB3aXRoIHRoZSBwcm94eSBiZWZvcmUgd2UgZ2V0XG4gICAgICAgIC8vIHRoZSBDT05ORUNUIHJlc3BvbnNlLCBzbyB0aGF0IGlmIHRoZSByZXNwb25zZSBpcyBhbnl0aGluZyBvdGhlciB0aGFuIGFuIFwiMjAwXCJcbiAgICAgICAgLy8gcmVzcG9uc2UgY29kZSwgdGhlbiB3ZSBjYW4gcmUtcGxheSB0aGUgXCJkYXRhXCIgZXZlbnRzIG9uIHRoZSBzb2NrZXQgb25jZSB0aGVcbiAgICAgICAgLy8gSFRUUCBwYXJzZXIgaXMgaG9va2VkIHVwLi4uXG4gICAgICAgIGxldCBidWZmZXJzTGVuZ3RoID0gMDtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IFtdO1xuICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgY29uc3QgYiA9IHNvY2tldC5yZWFkKCk7XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICBvbmRhdGEoYik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc29ja2V0Lm9uY2UoJ3JlYWRhYmxlJywgcmVhZCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgZGVidWcoJ29uZW5kJyk7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdQcm94eSBjb25uZWN0aW9uIGVuZGVkIGJlZm9yZSByZWNlaXZpbmcgQ09OTkVDVCByZXNwb25zZScpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbmVycm9yKGVycikge1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgZGVidWcoJ29uZXJyb3IgJW8nLCBlcnIpO1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25kYXRhKGIpIHtcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChiKTtcbiAgICAgICAgICAgIGJ1ZmZlcnNMZW5ndGggKz0gYi5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBidWZmZXJlZCA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgYnVmZmVyc0xlbmd0aCk7XG4gICAgICAgICAgICBjb25zdCBlbmRPZkhlYWRlcnMgPSBidWZmZXJlZC5pbmRleE9mKCdcXHJcXG5cXHJcXG4nKTtcbiAgICAgICAgICAgIGlmIChlbmRPZkhlYWRlcnMgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8ga2VlcCBidWZmZXJpbmdcbiAgICAgICAgICAgICAgICBkZWJ1ZygnaGF2ZSBub3QgcmVjZWl2ZWQgZW5kIG9mIEhUVFAgaGVhZGVycyB5ZXQuLi4nKTtcbiAgICAgICAgICAgICAgICByZWFkKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGVhZGVyUGFydHMgPSBidWZmZXJlZFxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCBlbmRPZkhlYWRlcnMpXG4gICAgICAgICAgICAgICAgLnRvU3RyaW5nKCdhc2NpaScpXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdcXHJcXG4nKTtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0TGluZSA9IGhlYWRlclBhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoIWZpcnN0TGluZSkge1xuICAgICAgICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ05vIGhlYWRlciByZWNlaXZlZCBmcm9tIHByb3h5IENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaXJzdExpbmVQYXJ0cyA9IGZpcnN0TGluZS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9ICtmaXJzdExpbmVQYXJ0c1sxXTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1c1RleHQgPSBmaXJzdExpbmVQYXJ0cy5zbGljZSgyKS5qb2luKCcgJyk7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBoZWFkZXJQYXJ0cykge1xuICAgICAgICAgICAgICAgIGlmICghaGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdENvbG9uID0gaGVhZGVyLmluZGV4T2YoJzonKTtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RDb2xvbiA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYEludmFsaWQgaGVhZGVyIGZyb20gcHJveHkgQ09OTkVDVCByZXNwb25zZTogXCIke2hlYWRlcn1cImApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gaGVhZGVyLnNsaWNlKDAsIGZpcnN0Q29sb24pLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuc2xpY2UoZmlyc3RDb2xvbiArIDEpLnRyaW1TdGFydCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBoZWFkZXJzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW2tleV0gPSBbY3VycmVudCwgdmFsdWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWJ1ZygnZ290IHByb3h5IHNlcnZlciByZXNwb25zZTogJW8gJW8nLCBmaXJzdExpbmUsIGhlYWRlcnMpO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgY29ubmVjdDoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYnVmZmVyZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzb2NrZXQub24oJ2Vycm9yJywgb25lcnJvcik7XG4gICAgICAgIHNvY2tldC5vbignZW5kJywgb25lbmQpO1xuICAgICAgICByZWFkKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnBhcnNlUHJveHlSZXNwb25zZSA9IHBhcnNlUHJveHlSZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXByb3h5LXJlc3BvbnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@distube/ytdl-core/node_modules/https-proxy-agent/dist/parse-proxy-response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@distube/ytdl-core/package.json":
/*!******************************************************!*\
  !*** ./node_modules/@distube/ytdl-core/package.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@distube/ytdl-core","description":"DisTube fork of ytdl-core. YouTube video downloader in pure javascript.","keywords":["youtube","video","download","distube"],"version":"4.16.12","repository":{"type":"git","url":"git://github.com/distubejs/ytdl-core.git"},"author":"Skick (https://github.com/skick1234)","contributors":["fent <fentbox@gmail.com> (https://github.com/fent)","Tobias Kutscha (https://github.com/TimeForANinja)","Andrew Kelley (https://github.com/andrewrk)","Mauricio Allende (https://github.com/mallendeo)","Rodrigo Altamirano (https://github.com/raltamirano)","Jim Buck (https://github.com/JimmyBoh)","Pawel Rucinski (https://github.com/Roki100)","Alexander Paolini (https://github.com/Million900o)"],"main":"./lib/index.js","types":"./typings/index.d.ts","files":["lib","typings"],"dependencies":{"http-cookie-agent":"^7.0.1","https-proxy-agent":"^7.0.6","m3u8stream":"^0.8.6","miniget":"^4.2.3","sax":"^1.4.1","tough-cookie":"^5.1.2","undici":"^7.8.0"},"devDependencies":{"@types/node":"^22.15.2","prettier":"^3.5.3","typescript":"^5.8.3"},"engines":{"node":">=20.18.1"},"license":"MIT","funding":"https://github.com/distubejs/ytdl-core?sponsor","scripts":{"prettier":"prettier --write \\"**/*.{js,json,yml,md,ts}\\""}}');

/***/ })

};
;